<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Powersee的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://powersee.github.io/"/>
  <updated>2020-03-29T07:40:06.000Z</updated>
  <id>https://powersee.github.io/</id>
  
  <author>
    <name>powersee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内网穿透工具 nps</title>
    <link href="https://powersee.github.io/2020/03/about-nps/"/>
    <id>https://powersee.github.io/2020/03/about-nps/</id>
    <published>2020-03-29T02:44:35.000Z</published>
    <updated>2020-03-29T07:40:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>nps 是一款内网穿透工具，在 github 上面有一万多个 star ：<a href="https://github.com/ehang-io/nps" target="_blank" rel="noopener">https://github.com/ehang-io/nps</a></p><p>这个的原理和 frp 是一样的，都是用服务器来中转，不过用起来会简单一点。</p><blockquote><p>要想进行下面的操作，需要有一个服务器，如果你没有的话， <a href="https://www.vultr.com/?ref=8161953-4F" target="_blank" rel="noopener">点此链接注册充值 10 美元送 50 美元</a></p></blockquote><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p>服务器开好后，先下载 nps ，解压，安装，启动。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/ehang-io/nps/releases/download/v0.26.6/linux_amd64_server.tar.gz</span><br><span class="line">tar -zxvf linux_amd64_server.tar.gz</span><br><span class="line">./nps install</span><br><span class="line">nps start</span><br></pre></td></tr></table></figure><p>这样服务器就启动 nps 这个服务了，在浏览器输入 ip:8080 就可以进行管理。</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>像 N1 ，我家云，猫盘 这些设备，都是 arm64 ，因此它的使用方法都是一样的。</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/ehang-io/</span>nps<span class="regexp">/releases/</span>download<span class="regexp">/v0.26.6/</span>linux_arm64_client.tar.gz</span><br><span class="line">tar -zxvf linux_arm64_client.tar.gz</span><br></pre></td></tr></table></figure><p>然后需要到管理面板，添加客户端，这样会生成一个密钥。有了这个才能和服务器建立连接。</p><p>建立的命令是这样的。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">./npc <span class="attribute">-server</span>=ip:port <span class="attribute">-vkey</span>=web界面中显示的密钥</span><br></pre></td></tr></table></figure><p>例如我的就是这样</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">./npc <span class="attribute">-server</span>=45.32.126.224:8024 <span class="attribute">-vkey</span>=4vv7n1p7u584an64</span><br></pre></td></tr></table></figure><p>此时就与服务器建立好连接了，之后的操作只需在管理面板，进行端口映射即可。</p><h2 id="建立隧道"><a href="#建立隧道" class="headerlink" title="建立隧道"></a>建立隧道</h2><p>点击左边的【TCP 隧道】，【新增】，填写【ID】，服务器访问端口，目标端口。</p><p>比如我服务器端口设置为 1234 ，目标端口为 80 ，建立好后，我只要访问服务器的1234端口，就可以看到内网设备 80 端口的内容。想要访问其它的端口，就再建立隧道。内网的端口和服务器的端口是可以保持一致的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原本以为，它只是用起来比 frp 简单。但现在发现不止于此，还有其它很多功能。</p><p>首先作为内网穿透工具，它用起来确实简单，点几下就可以建立好连接。</p><p>然后里面的域名解析功能，用起来也非常的简单。事先把 *.xxx.com 解析到服务器，之后就可以实现不同的子域名，访问不同的页面了。</p><p>然后我发现，用 nps 也是可以套 CDN 的，这样就不用担心自己的 IP 暴露了，不过速度回变慢一些。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nps 是一款内网穿透工具，在 github 上面有一万多个 star ：&lt;a href=&quot;https://github.com/ehang-io/nps&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/ehang-io
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>猫盘群晖折腾记录</title>
    <link href="https://powersee.github.io/2020/03/maopan/"/>
    <id>https://powersee.github.io/2020/03/maopan/</id>
    <published>2020-03-27T07:01:24.000Z</published>
    <updated>2020-03-27T07:16:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近研究猫盘这台设备，恩山上面谈论这个好像不多。所以我找到了其它几个好去处。</p><ol><li><a href="https://www.huakings.cn/category/maopan/" target="_blank" rel="noopener">花王网络</a></li><li><a href="http://bbs.nas66.com/forum-38-1.html" target="_blank" rel="noopener">矿渣论坛</a></li></ol><p>这两个地方可以学到很多东西，感谢各位大佬的付出。</p><p>记录一些教程文章</p><p><a href="https://zhuanlan.zhihu.com/p/104139410" target="_blank" rel="noopener">将猫盘固件从 DS119J 升级为 DS120J</a></p><p><a href="https://www.cnblogs.com/housestudy/p/11968726.html" target="_blank" rel="noopener">猫盘群辉装qbittorrent和aria2</a></p><hr><p>由于我的机器是卖家帮我刷好群晖系统，再给我发过来的，所以我没有去折腾刷机这些东西。</p><h2 id="一、开启LED灯"><a href="#一、开启LED灯" class="headerlink" title="一、开启LED灯"></a>一、开启LED灯</h2><p>上面的花王网络的博主，写了一个脚本可以控制 LED 灯的颜色，有人把它转载到 什么值得买 上面了。<a href="https://post.smzdm.com/p/aqn96mx2/" target="_blank" rel="noopener">万能的脚本让猫盘变完美</a> ，通过添加任务计划，我们就可以实现开机后，显示绿灯，关机后显示红灯。（因为猫盘关机只是系统关了而已，风扇其实还是在转的……所以有时不知道机器，是处于开机还是关机状态）</p><p>脚本的下载链接是这个</p><p><a href="https://www.huakings.cn/mp202003/aw2013_led_syno.sh" target="_blank" rel="noopener">https://www.huakings.cn/mp202003/aw2013_led_syno.sh</a></p><p><a href="/misc/2020/aw2013_led_syno.sh">本人备份</a></p><h2 id="二、关于掉-ip-的问题"><a href="#二、关于掉-ip-的问题" class="headerlink" title="二、关于掉 ip 的问题"></a>二、关于掉 ip 的问题</h2><p>这台机器掉 ip 严重。指的是，机器启动后，有时候会获取不到 ip，这个是硬件问题，所以有些设备用得一直很稳，有的就频频掉 ip 。例如论坛中有人说，机器启动五次，只有一次可以获取到 ip 。</p><p>我自己的也有这个问题，有时候也获取不到 ip 。解决的方法只有重启，还是获取不到，那就等断电等十分钟，再启动一般就可以获取到了。</p><h2 id="三、掉盘"><a href="#三、掉盘" class="headerlink" title="三、掉盘"></a>三、掉盘</h2><p>机器刚到手时，急切想了解它。于是把 N1 上面的硬盘拆下来，放到里面安装群晖系统。进入系统后发现，硬盘有坏道，时不时地就发出 “ 吱、吱、吱 ” 的异响。再过一会就发现掉盘了，就是硬盘明明连接着，却显示找不到硬盘，重启也没用。而我拿连接电脑却可以识别……</p><p>那估计群晖对硬盘的要求比较高吧，而我这块硬盘已经买了好几年了，而且有坏道，估计它被群晖嫌弃了。没法，就到闲鱼再买一块。</p><p>小猫盘只能用 2.5 寸的硬盘，这个在闲鱼比较贵，500G 的要一百块，唉，买不起。最终找了一款 320G 的，59 块包邮。卖家写全新零通电。</p><p>买来就可以愉快地使用群晖系统了。下载、共享、备份相册、安装 Python ……</p><p>然而第二天就发生悲剧了，开机几分钟后，就会掉盘。硬盘又时不时地就发出 “ 吱、吱、吱 ” 的异响。然而我这硬盘是新买的啊，难到闲鱼卖家坑我？于是我把硬盘拿到电脑扫一下。</p><p><img src="/img/2020/硬盘全绿.jpg" alt="硬盘全绿"></p><p>发现并没法坏道啊，怎么昨天还好好的，今天就不能用了呢？郁闷。难道这硬盘不够高档，又被群晖嫌弃了？那这群晖系统也太难伺候了吧。</p><h2 id="四、九曲十八弯的拯救大行动"><a href="#四、九曲十八弯的拯救大行动" class="headerlink" title="四、九曲十八弯的拯救大行动"></a>四、九曲十八弯的拯救大行动</h2><p>本打算把系统充 119j 升级 120j ，看看能否解决这个问题。如果不行再试试把系统刷程 one space XP3 ，如果刷成这个系统也有问题，就证明是硬件的问题，估计就没救了。</p><p>正当我准备刷机的时候，突然想到，有时候我打开插排的电源，猫盘这个机器并没有启动，风扇并没有转，需要我碰一下猫盘的电线才会转，那难道是电线接触不良的问题？</p><p>于是我把之前淘宝 1.5 包邮买的 USB 转 DC 5.5 拿出来，想用这条线试一下。（之前买这条线是想试一下能否用这来给 N1 供电，结果发现机器的灯会亮，但是无法进入系统。）结果发现，这条线无法插入猫盘……明明可以插入 N1 的……</p><p>不过我还有另外一条线，是淘宝 9.9 包邮买的，叫【诱骗激活线9-12V充电宝移动电源路由器USB供电】，输出12V的，我用这个加我那个12V的小米手机充电头，就可以给 N1 供电，并正常使用，不过这成本太高了。9.9 + 19.9 = 29.8 ，还是老实用斐讯自身的电源适配器吧。</p><p>那么这条用不到的线，拿来给猫盘供电，配合猫盘自带的 5V3A 的充电头。就发现机器可以正常使用了。</p><p>其实真的很意外的，因为一开始线接触不良，机器是无法启动的，我轻轻碰一下线就可以启动了。但是使用中电线如果接触不良，不应该是整台机器断电吗？怎么只是硬盘异响，然后掉盘而已呢？机器风扇依然转动着，如果不是刚好手上有这台多余的电线，估计我还得为刷机去折腾很久吧。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>玩矿渣很废时间。</p><h2 id="折腾升级-120j"><a href="#折腾升级-120j" class="headerlink" title="折腾升级 120j"></a>折腾升级 120j</h2><p>群晖的 119j 这台机器，是 256M 内存。我们的猫盘是 512M ，所以有些人觉得，刷 119j 的固件，可能只能用一半的内存而已。而 120j 就和猫盘一样是 512M 的内存，那把固件升级到 120j 是否就可以，发挥猫盘真正的性能呢？</p><p>没升级前，内存最高只能用到 53%，平时大多维持在 48%</p><p><img src="/img/2020/最高53.jpg" alt="最高53%"></p><p>于是根据这篇文章：<a href="https://zhuanlan.zhihu.com/p/104139410" target="_blank" rel="noopener">将猫盘固件从 DS119J 升级为 DS120J</a> 升级一下 ，升级后内容不会丢失，可以放心升级。</p><p>然后我发现最高能到 60%，但是平时大多也是维持在 48%</p><p>所以，我认为升不升级，应该是一样的。原先的 119j 应该是没有限制内存的，因为白群晖本来就是可以升级内存的。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol><li>群晖里面的下载器，ds station 是可以用 transdroid 来控制的。</li><li>使用 ipv6 来远程访问群晖效果还不错。</li><li>moments 来管理相册感觉不习惯，还是 photo station 好。</li><li>……</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近研究猫盘这台设备，恩山上面谈论这个好像不多。所以我找到了其它几个好去处。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.huakings.cn/category/maopan/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;花王网
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>我家云设置贴吧自动签到</title>
    <link href="https://powersee.github.io/2020/03/wjy-python/"/>
    <id>https://powersee.github.io/2020/03/wjy-python/</id>
    <published>2020-03-19T12:04:49.000Z</published>
    <updated>2020-03-19T12:37:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>需要先安装pip</p><p>对于 Python3.x 的</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install python3-pip</span><br></pre></td></tr></table></figure><p>装好后用 pip3 来装 requests 这个模块</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> requests</span><br></pre></td></tr></table></figure><p>之后我们就可以到 github 上面拉取 tieba 签到脚本了。</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/powersee/</span>some-scripts<span class="regexp">/master/</span>baidutieba_signin.py</span><br></pre></td></tr></table></figure><p>然后需要填写 cookie ，之后就能用 Python 来运行这个脚本了。</p><p><img src="/img/2020/firefox-cookie.jpg" alt="firefox-cookie"></p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python3</span> baidutieba_signin.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>一切顺利的话，就看到签到信息了。但是这还不够，我想让它每天自动执行。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>之后会让你选择编辑器，默认是使用 nano ，这个比较容易使用。也可以选择第二个 vim 。当然这里选后不喜欢，可以用 select-editor 这个命令来重新选择。</p><p>进入编辑器后，在里面添加这一行，就可以在每天的 7 点和 8 点，自动执行这个脚本去签到，然后将输出的信息，保存在 /root/tieba.log 这个文件里。</p><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">7</span>,<span class="number">8</span> * * * python3 /root/baidutieba_signin.py &gt;&gt; /root/tieba.<span class="keyword">log</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;需要先安装pip&lt;/p&gt;
&lt;p&gt;对于 Python3.x 的&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt-&lt;span class
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
      <category term="python" scheme="https://powersee.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>我家云相关</title>
    <link href="https://powersee.github.io/2020/03/wojiayun/"/>
    <id>https://powersee.github.io/2020/03/wojiayun/</id>
    <published>2020-03-13T08:20:35.000Z</published>
    <updated>2020-03-14T07:17:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>我家云，又名掉盘云，众多矿渣中的一款。其配置还算不错，但由于有一个严重的缺点——掉盘，即机器内的硬盘时不时地，就自动断开连接，导致获得【掉盘云】这个荣称。也因此而难以获得垃圾佬们的芳心，二手价格长期维持在百元以下。</p><p>不过现今有大佬开发了比较好用的固件，据说很多人解决了掉盘的问题，因此价格开始逐渐上升了。</p><p>恩山固件发布贴：<a href="https://www.right.com.cn/forum/thread-976714-1-1.html" target="_blank" rel="noopener">粒子云，我家云omv自用备份稳定性佳</a></p><p>固件作者：Ride_Wind，<a href="https://www.right.com.cn/forum/space-uid-155217.html" target="_blank" rel="noopener">恩山链接</a></p><p>博客：<a href="https://blog.windtech.cf/" target="_blank" rel="noopener">https://blog.windtech.cf/</a></p><h2 id="刷机相关"><a href="#刷机相关" class="headerlink" title="刷机相关"></a>刷机相关</h2><p>【webpad】大佬的刷机教程 <a href="https://www.right.com.cn/forum/thread-341574-1-1.html" target="_blank" rel="noopener">联想粒子矿云/我家云 线刷OMV（Open Media Vault），图文教程</a></p><p>推荐文章教程：来自 smzdm 的【阿文菌】 <a href="https://post.smzdm.com/p/az50epz5/" target="_blank" rel="noopener">我家云 保姆级教程：完美OMV固件</a></p><p>第一次刷机如果只显示【发现一个 loader 设备】，可以点击高级功能，里面可以点【进入 maskrom】</p><p><img src="/img/2020/高级功能.png" alt="高级功能"></p><p>不过我刷机的时候并不知道这个，我是把机器拆开，然后找一根很短的电线，短接主板后面的两个点。</p><p><img src="/img/2020/短接.jpg" alt="短接"></p><p>一手按住，一手通电，机器一启动就自动进入 maskrom 了，然后便可以愉快地刷机，这种方法也是终极的救砖方法。</p><h2 id="docker相关"><a href="#docker相关" class="headerlink" title="docker相关"></a>docker相关</h2><p>乘风大佬的固件，本身就修改好 docker 的镜像源了，因此我们可以直接拉取镜像。</p><h3 id="portainer"><a href="#portainer" class="headerlink" title="portainer"></a>portainer</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line">docker run -d -p <span class="number">9000</span>:<span class="number">9000</span> -v <span class="regexp">/var/</span>run<span class="regexp">/docker.sock:/</span>var<span class="regexp">/run/</span>docker.sock -v <span class="string">portainer_data:</span><span class="regexp">/data --restart always portainer/</span><span class="string">portainer:</span>linux-arm</span><br></pre></td></tr></table></figure><h3 id="qbittorrent"><a href="#qbittorrent" class="headerlink" title="qbittorrent"></a>qbittorrent</h3><p>自带的 qb 是 4.1.7 ，它好像有个问题，没法通过链接的方式来下载种子。所以我想把它停了，改用 docker 来创建一个最新版的 qb 。</p><p>那么我需要先把自带的 qb 的开机自起取消，这个比较容易，改个名字它就不会启动了。</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">mv</span> /<span class="meta">opt</span>/<span class="keyword">bin/qbittorrent-nox </span>/<span class="meta">opt</span>/<span class="keyword">bin/1qbittorrent-nox</span></span><br></pre></td></tr></table></figure><p>qb最重要的两个文件夹 <code>.config</code> 和 <code>.local</code> ，自带的 qb 是将其放在 <code>/root</code> 里，如果你使用 docker 版的 qb 后，想保留之前的种子信息，下方的 -v 参数自己修改一下。我就不保留了。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">IMAGE_NAME</span>=80x86/qbittorrent:4.2.1-arm64</span><br><span class="line"><span class="comment">#这里我原本的默认下载路径是 /sharedfolders/wjy/ 你应该改成自己的</span></span><br><span class="line"><span class="attribute">DOWNLOAD_PATH</span>=/sharedfolders/wjy/</span><br><span class="line"><span class="attribute">QBT_AUTH_SERVER_ADDR</span>=<span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line">docker <span class="builtin-name">run</span> -d --name qbittorrent \</span><br><span class="line">        -e <span class="attribute">WEB_PORT</span>=8080 \</span><br><span class="line">        -e <span class="attribute">BT_PORT</span>=8998 \</span><br><span class="line">        -e <span class="attribute">QBT_AUTH_SERVER_ADDR</span>=<span class="variable">$QBT_AUTH_SERVER_ADDR</span> \</span><br><span class="line">        --restart unless-stopped \</span><br><span class="line">        --network host \</span><br><span class="line">        -v /var/lib/qbittorrent/.config/qBittorrent:<span class="built_in">/config </span>\</span><br><span class="line">        -v /var/lib/qbittorrent/.local/share/data/qBittorrent:/data \</span><br><span class="line">        -v <span class="string">"<span class="variable">$DOWNLOAD_PATH</span>"</span>:/downloads \</span><br><span class="line">        -v <span class="string">"<span class="variable">$DOWNLOAD_PATH</span>"</span>:<span class="string">"<span class="variable">$DOWNLOAD_PATH</span>"</span> \</span><br><span class="line">        --mount <span class="attribute">type</span>=tmpfs,destination=/tmp \</span><br><span class="line">        <span class="variable">$&#123;IMAGE_NAME&#125;</span></span><br></pre></td></tr></table></figure><p>之后可能会出现文件夹权限问题，将会导致 qb 无法启动，给予 777 权限</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">chmod -R <span class="number">777</span> /var/<span class="class"><span class="keyword">lib</span>/<span class="title">qbittorrent</span>/</span></span><br></pre></td></tr></table></figure><h2 id="导航相关"><a href="#导航相关" class="headerlink" title="导航相关"></a>导航相关</h2><p>在web导航页面添加或者删除图标，修改 /opt/wwwroot/navi/index.php</p><h2 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h2><h3 id="查看-CPU-温度"><a href="#查看-CPU-温度" class="headerlink" title="查看 CPU 温度"></a>查看 CPU 温度</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">cpu=<span class="variable">$(</span>&lt;<span class="regexp">/sys/class</span><span class="regexp">/thermal/thermal</span>_zone<span class="number">0</span>/temp)</span><br><span class="line">echo <span class="string">"$((cpu/1000)) c"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;我家云，又名掉盘云，众多矿渣中的一款。其配置还算不错，但由于有一个严重的缺点——掉盘，即机器内的硬盘时不时地，就自动断开连接，导致获得【掉盘
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>装好 Mojave 之后要做的事</title>
    <link href="https://powersee.github.io/2020/03/Mojave/"/>
    <id>https://powersee.github.io/2020/03/Mojave/</id>
    <published>2020-03-08T12:26:20.000Z</published>
    <updated>2020-03-18T05:25:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近越来越觉得 macOS 的 10.15 版本很不好用，刚好手边也有一块闲置的硬盘，于是我想用它装 10.14 的 macOS 。</p><p>重新下载镜像，写入 U 盘，修改 config ，重启写入硬盘，完成。由于装过很多次，对此也算是轻车熟路。麻烦的是之后的驱动，以及常用软件的下载。</p><h2 id="0，声卡驱动"><a href="#0，声卡驱动" class="headerlink" title="0，声卡驱动"></a>0，声卡驱动</h2><p>github 下载最新的 applealc ，放入 kexts 里的 other ，把里面的万能声卡移出来。clover configurator 里注入 id，重启完成。</p><h2 id="1，调整按键"><a href="#1，调整按键" class="headerlink" title="1，调整按键"></a>1，调整按键</h2><p>由于使用 macOS 时，最主要用到的按键是 command ，在普通键盘上就是 Windows 键。为了能够和平时一样使用 ctrl + c , ctrl + v 来复制粘贴。可以在【系统偏好设置】–【键盘】–【修饰键…】里面将两者的位置换一下。</p><h2 id="2，开启-hidpi"><a href="#2，开启-hidpi" class="headerlink" title="2，开启 hidpi"></a>2，开启 hidpi</h2><p>如果使用原生的分辨率，字体会非常的小，而且还会模糊。这种情况在 Windows 上面也有，不过 Windows 上我们可以开启屏幕缩放，比如我的 1080P 显示器，我就比较喜欢开启 115% 的缩放。但是在 macOS 上，官方的设定是用 4K 的显示器时，就可以在【系统偏好设置】–【显示器】开启。然而我并没有 4K 的显示器……<br>这时就只能自己来手动开启了。</p><p><a href="https://github.com/xzhih/one-key-hidpi" target="_blank" rel="noopener">https://github.com/xzhih/one-key-hidpi</a></p><p>用 GitHub 上的这个脚本很容易就可以开启。（在 Catalina 里面的会复杂一些，因为一些权限的问题）<br>然后，此时在【系统偏好设置】–【显示器】的缩放里面就能看到选项了。但是能选的并不多，这时可以下载一个工具，RDM</p><p><a href="http://www.pc6.com/mac/441275.html" target="_blank" rel="noopener">http://www.pc6.com/mac/441275.html</a></p><p>这个工具提供更多的选择，比如我的显示器是 1920 × 1200 的，在系统里有 1280 × 800 和 1650 × 1050 的选项，但是用这个工具后，我可以选择 1440 × 900 。这个分辨率我个人觉得更加合适。</p><h2 id="3，oh-my-zsh-与-iterm2"><a href="#3，oh-my-zsh-与-iterm2" class="headerlink" title="3，oh my zsh 与 iterm2"></a>3，oh my zsh 与 iterm2</h2><p>由于系统本身就自带有 zsh 这个 shell 了，所以我只需要再装一下 oh-my-zsh ，然后在其装好时会询问【是否将 zsh 设置为默认的 shell】，选择是即可。<br>之后安装 iterm2 替代 terminal 。</p><p>然后我还可以把之前系统的用户目录下的【.zshrc】和【.zsh_history】复制过来。</p><h2 id="4，复制-ssh-文件夹"><a href="#4，复制-ssh-文件夹" class="headerlink" title="4，复制 .ssh 文件夹"></a>4，复制 .ssh 文件夹</h2><p>这个文件夹里存放着私钥，直接复制过来我就可以 ssh 连接其它终端，以及 GitHub 之类。</p><h2 id="5，导入-fcpx-的设定"><a href="#5，导入-fcpx-的设定" class="headerlink" title="5，导入 fcpx 的设定"></a>5，导入 fcpx 的设定</h2><p>主要是自定义的键盘设置，还有 compressor 中的自定义的预设。</p><blockquote><p>暂时写到这……</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近越来越觉得 macOS 的 10.15 版本很不好用，刚好手边也有一块闲置的硬盘，于是我想用它装 10.14 的 macOS 。&lt;/p&gt;
&lt;p&gt;重新下载镜像，写入 U 盘，修改 config ，重启写入硬盘，完成。由于装过很多次，对此也算是轻车熟路。麻烦的是之后的驱动，
      
    
    </summary>
    
    
      <category term="mac" scheme="https://powersee.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>备份整个 Linux 系统</title>
    <link href="https://powersee.github.io/2020/03/backup/"/>
    <id>https://powersee.github.io/2020/03/backup/</id>
    <published>2020-03-06T14:39:07.000Z</published>
    <updated>2020-03-06T16:15:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>近来经常折腾 N1 ，刷机频繁。然后我就想，我能否把现在用的这个系统，整个备份一下呢？就像 Windows 上的 ghost 一样。</p><p>接着我就到 恩山 搜一下，果然也有人有过这个想法，并且发帖问了。但是下方的评论看起来好像挺难的。但我记得之前看过用 dd 这个命令就可以，所以我先来试试。</p><p>首先要知道当前的机器上有哪些磁盘，用 <code>fdisk -l</code> 可以查出</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> fdisk -l</span></span><br><span class="line">Disk /dev/mmcblk0: 7.3 GiB, 7818182656 bytes, 15269888 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line">Disk /dev/mmcblk0boot1: 4 MiB, 4194304 bytes, 8192 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line">Disk /dev/mmcblk0boot0: 4 MiB, 4194304 bytes, 8192 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 465.8 GiB, 500107862016 bytes, 976773168 sectors</span><br></pre></td></tr></table></figure><p>可以看出， mmcb1k0 就是机器自身的硬盘，而 sda 则是我自己外接的移动硬盘。</p><p>经过了解知道，dd 可以将当前整块磁盘的内容，完整地复制到其它的磁盘。命令如下：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=<span class="regexp">/dev/sda</span> <span class="keyword">of</span>=<span class="regexp">/dev/sdb</span></span><br></pre></td></tr></table></figure><p>这样就是把 sda 这块盘的内容复制到 sdb 里</p><p>但是平时从网上下载的固件主要是 img 格式的，这种怎么做呢？同样用 dd 就行：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=<span class="regexp">/dev/sda</span> <span class="keyword">of</span>=<span class="regexp">/media/one</span><span class="regexp">/backup.img</span></span><br></pre></td></tr></table></figure><p>我在 N1 上用的命令是这个：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=<span class="regexp">/dev/mmcblk</span>0 <span class="keyword">of</span>=<span class="regexp">/media/one</span><span class="regexp">/back.img</span></span><br></pre></td></tr></table></figure><p>等了好久好久，才复制完成，此时在我移动硬盘的根目录下，可以看到一个 back.img 文件。</p><p>之前要恢复的话，用这个命令</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">dd</span> <span class="keyword">if</span>=/media/one/back<span class="selector-class">.img</span> of=/dev/mmcblk0</span><br></pre></td></tr></table></figure><p>在 ubuntu 中将系统dd到 U盘</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">sudo dd if=/dev/sda of=/dev/sdb conv=noerror,sync</span><br><span class="line">^C14583513+<span class="number">0</span> records in</span><br><span class="line"><span class="number">14583513</span>+<span class="number">0</span> records out</span><br><span class="line"><span class="number">7466758656</span> bytes (<span class="number">7.5</span> GB, <span class="number">7.0</span> GiB) copied, <span class="number">7048.69</span> s, <span class="number">1.1</span> MB/s</span><br></pre></td></tr></table></figure><p>写了两个小时还没好，要去睡觉了，只能 ctrl+c 取消，结果发现只剩 0.5 G还没写。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近来经常折腾 N1 ，刷机频繁。然后我就想，我能否把现在用的这个系统，整个备份一下呢？就像 Windows 上的 ghost 一样。&lt;/p&gt;
&lt;p&gt;接着我就到 恩山 搜一下，果然也有人有过这个想法，并且发帖问了。但是下方的评论看起来好像挺难的。但我记得之前看过用 dd 这个
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>进阶了解 hexo 博客</title>
    <link href="https://powersee.github.io/2020/02/more-about-hexo/"/>
    <id>https://powersee.github.io/2020/02/more-about-hexo/</id>
    <published>2020-02-23T09:54:01.000Z</published>
    <updated>2020-02-23T11:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>个人使用 hexo 搭建博客已经有一年多的时间了。但是说实在，对其了解并不多，我只知道用它，可以把我的 markdown 文档渲染成 html 文件，之后放到 GitHub 上就可以搭建博客。</p><a id="more"></a><p>一开始的使用是看别人的教程，网上一堆人写了用 hexo 来搭建免费博客的文章。其官网 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a> 上面也有教程，几条命令就可以在电脑上弄好一个博客。</p><p>之后便是将文章推送到 GitHub 上面，进行设置，使用 GitHub page 建立博客网站。在这时我了解到，我们还可以搭建在国内的网站上面，如 gitee ，coding 。可以让我们的访问速度更快。而且之前还了解到有位老哥有一个不错的方法，可以让国外的 ip 就访问 github 的博客，国内的 ip 就访问 gitee 或者 coding 的博客。好像是利用域名解析来达到目的的，具体我没有去尝试。</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>不像　wordpress ，所有文件都是在服务器上。hexo 的博客源文件都是在我们自己的电脑上面的，如果我们的电脑出问题，如硬盘坏了，被偷了，那么我们的博客就没法更新和修改。因此我们需要自己来备份这些文件。</p><p>如果只是想备份文章而已，那么同步网盘如 onedrive 、坚果云 也足够的。当然你想同步整个博客文件夹也可以，不过我不建议这么做，因为里面的文件实在太多了，之前　git push　的时候看到，好像有几万个文件。而且，这样也太 low 了。</p><p>正确的备份方法应该是使用 git 来备份。</p><h3 id="备份前准备"><a href="#备份前准备" class="headerlink" title="备份前准备"></a>备份前准备</h3><p>我们得知道我们备份的目的，像我的话，我最主要的目的是备份文章，其次是博客主题，再来是博客的一些配置。<strong>目的明确</strong>之后，就来分析博客根目录下的文件。</p><p>需要备份的</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source //文件夹放置着博客文章，最最重要的一个文件夹</span><br><span class="line">themes //放置着主题，我个人喜欢一起备份</span><br><span class="line">scaffolds //页面模板位置</span><br><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure><p>不需要备份的</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.deploy_git   //里面的文件除了多一个 .git 其它和 public 里面一样</span><br><span class="line">node_modules  //在根目录下 npm i 就会读取 package.json 来安装模块，没必要备份</span><br><span class="line">public      // hexo 生成 html 页面后所放的地方，hexo g 就可以生成，没必要备份</span><br><span class="line">db.json       //执行 hexo s 启动本地服务器的时候就会自动生成，没必要备份</span><br></pre></td></tr></table></figure><p>了解这些之后，我们就可以只备份必要的文件。</p><h3 id="以前的备份方案"><a href="#以前的备份方案" class="headerlink" title="以前的备份方案"></a>以前的备份方案</h3><p>我之前是根据这篇文章　<a href="https://www.jianshu.com/p/beb8d611340a" target="_blank" rel="noopener">Hexo博客从一台电脑迁移到其他电脑</a>　将博客源文件备份到 GitHub 上面。这个方法是让渲染文件和博客源文件，都放在同一个仓库里面的不同分支。但我个人觉得到不如放两个仓库好。</p><h3 id="现在的备份方案"><a href="#现在的备份方案" class="headerlink" title="现在的备份方案"></a>现在的备份方案</h3><p>首先我们如果想备份主题的话，需要把主题文件夹里的 <code>.git</code> 给删除了，让它变成一个普通的文件夹。比如很多人使用的 <code>next</code> 主题，就进入 <code>themes/next</code> 里面将 .git 文件夹给删除了就行。</p><p>在博客根目录下 <code>git init</code> ,让其变成一个 git 仓库。将那些不需要备份的文件和文件夹添加到 <code>.gitignore</code> 中，我的里面有这些内容。</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">public</span><br><span class="line">db.json</span><br><span class="line">.deploy_git</span><br><span class="line">.DS_Store</span><br><span class="line">node_modules</span><br></pre></td></tr></table></figure><p>之后 <code>git add .</code> ，再 commit ，然后将其推送到远程仓库即可。之后换电脑，只需把这个仓库 clone 到电脑，进入仓库， <code>npm i</code> 一下，npm 就会根据两个 package 开头的文件，去帮我们安装相对应的模块，之后我们便可以看到 <code>node_modules</code> 文件夹又回来了。此时我们的博客便已搭建成功，可以继续写博客了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;个人使用 hexo 搭建博客已经有一年多的时间了。但是说实在，对其了解并不多，我只知道用它，可以把我的 markdown 文档渲染成 html 文件，之后放到 GitHub 上就可以搭建博客。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="WordPress" scheme="https://powersee.github.io/tags/WordPress/"/>
    
  </entry>
  
  <entry>
    <title>N1 小钢炮系统相关</title>
    <link href="https://powersee.github.io/2020/02/about-N1-nano/"/>
    <id>https://powersee.github.io/2020/02/about-N1-nano/</id>
    <published>2020-02-14T03:54:43.000Z</published>
    <updated>2020-03-01T12:37:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录一些跟小钢炮系统相关的网址、docker 命令等。</p><a id="more"></a><blockquote><p>建议搭配视频使用：<a href="https://www.bilibili.com/video/av88448594" target="_blank" rel="noopener">小钢炮系统使用指南</a></p></blockquote><h2 id="系统固件下载"><a href="#系统固件下载" class="headerlink" title="系统固件下载"></a>系统固件下载</h2><p><a href="https://rom.nanodm.net/" target="_blank" rel="noopener">https://rom.nanodm.net/</a></p><h2 id="docker-国内源"><a href="#docker-国内源" class="headerlink" title="docker 国内源"></a>docker 国内源</h2><p>编辑配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>将里面的内容改为这样</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://dockerhub.azk8s.cn"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改完去 system 里的 Startup 将 docker 停止，再启动。</p><p>之后我们安装 docker UI 应该就可以成功了。</p><h2 id="filebrowser"><a href="#filebrowser" class="headerlink" title="filebrowser"></a>filebrowser</h2><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">docker pull <span class="number">80</span>x<span class="number">86</span>/filebrowser:ar<span class="name">m64</span></span><br></pre></td></tr></table></figure><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">IMAGE_NAME=80x86/filebrowser</span><br><span class="line"></span><br><span class="line">WEB_PORT=8082</span><br><span class="line">FB_AUTH_SERVER_ADDR="127.0.0.1"</span><br><span class="line">docker run\</span><br><span class="line">        -<span class="ruby">e PUID=$UID \</span></span><br><span class="line"><span class="ruby">        -e PGID=$GID \</span></span><br><span class="line"><span class="ruby">        -e WEB_PORT=$WEB_PORT \</span></span><br><span class="line"><span class="ruby">        -e FB_AUTH_SERVER_ADDR=$FB_AUTH_SERVER_ADDR \</span></span><br><span class="line"><span class="ruby">        -p $WEB_PORT<span class="symbol">:</span>$WEB_PORT \</span></span><br><span class="line"><span class="ruby">        -v /<span class="symbol">media:</span>/myfiles \</span></span><br><span class="line"><span class="ruby">        --mount type=tmpfs,destination=<span class="regexp">/tmp \</span></span></span><br><span class="line"><span class="ruby">        $&#123;IMAGE_NAME&#125;<span class="symbol">:arm64</span></span></span><br></pre></td></tr></table></figure><p>这个应该大家都可以通用的，启动后等看到这一行</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">msg</span>=<span class="string">"Listening on [::]:8082"</span></span><br></pre></td></tr></table></figure><p>就到浏览器打开<code>IP:8082</code>来访问，看看是否能正常使用。可以的话，再按 <code>ctrl + C</code> 退出，然后再到 Portainer 里面启动。</p><h2 id="qbittorrent"><a href="#qbittorrent" class="headerlink" title="qbittorrent"></a>qbittorrent</h2><p>要先停止自带的 qb ，去 system 里的 Startup 将 qbittorrent 停止，然后将 Yes 改为 No ，这样就不会开机自启了。</p><blockquote><p>勘误，视频中讲将S92qbittorrent改个名字，这种方法并不行。得将其移动到其它位置。</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/etc/init.d/</span></span><br><span class="line">mv S92qbittorrent <span class="string">..</span></span><br></pre></td></tr></table></figure><p>这样S92qbittorrent就会待在 /etc 这个目录下了。</p><p>拉去镜像</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">docker pull <span class="number">80</span>x86/<span class="string">qbittorrent:</span><span class="number">4.2</span><span class="number">.1</span>-arm64</span><br></pre></td></tr></table></figure><p>建立容器</p><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">IMAGE_NAME=80x86/qbittorrent:4.2.1-arm64</span><br><span class="line">#WEB_PORT=$(nvram get app.qb.listen_port)</span><br><span class="line">#这里我原本的默认下载路径是 /media/one/qb 你应该改成自己的</span><br><span class="line">DOWNLOAD_PATH=/media/one/qb</span><br><span class="line">BT_PORT=$(cat /var/lib/qbittorrent/.config/qBittorrent/qBittorrent.conf | grep -i 'Connection\\PortRangeMin' | cut -d'=' -f2)</span><br><span class="line">QBT_AUTH_SERVER_ADDR="127.0.0.1"</span><br><span class="line">if [ "$DOWNLOAD_PATH" = "/downloads" ] || [ "$DOWNLOAD_PATH" = "/downloads/" ]; then</span><br><span class="line">    echo "please set correct DOWNLOAD_PATH"</span><br><span class="line">    exit -1</span><br><span class="line">fi</span><br><span class="line">docker run -d --name qbittorrent \</span><br><span class="line">        -<span class="ruby">e PUID=$(id -u qbittorrent) \</span></span><br><span class="line"><span class="ruby">        -e PGID=$(cat /etc/group <span class="params">| grep -e '^users' |</span> cut -d<span class="string">':'</span> -f3) \</span></span><br><span class="line"><span class="ruby">        -e WEB_PORT=<span class="number">8088</span> \</span></span><br><span class="line"><span class="ruby">        -e BT_PORT=$BT_PORT \</span></span><br><span class="line"><span class="ruby">        -e QBT_AUTH_SERVER_ADDR=$QBT_AUTH_SERVER_ADDR \</span></span><br><span class="line"><span class="ruby">        --restart <span class="keyword">unless</span>-stopped \</span></span><br><span class="line"><span class="ruby">        --network host \</span></span><br><span class="line"><span class="ruby">        -v /var/lib/qbittorrent/.config/<span class="symbol">qBittorrent:</span>/config \</span></span><br><span class="line"><span class="ruby">        -v /var/lib/qbittorrent/.local/share/data/<span class="symbol">qBittorrent:</span>/data \</span></span><br><span class="line"><span class="ruby">        -v <span class="string">"$DOWNLOAD_PATH"</span><span class="symbol">:/downloads</span> \</span></span><br><span class="line"><span class="ruby">        -v <span class="string">"$DOWNLOAD_PATH"</span><span class="symbol">:<span class="string">"$DOWNLOAD_PATH"</span></span> \</span></span><br><span class="line"><span class="ruby">        --mount type=tmpfs,destination=<span class="regexp">/tmp \</span></span></span><br><span class="line"><span class="ruby">        $&#123;IMAGE_NAME&#125;</span></span><br></pre></td></tr></table></figure><p>这里的端口我改为 8088 ，也可以改为和原来一样的 8083</p><p>之后就可以通过 <code>IP:8088</code>来访问 qb 了。设置没错的话，应该可以看到之前的种子信息的。</p><h2 id="微力同步-verysync"><a href="#微力同步-verysync" class="headerlink" title="微力同步 verysync"></a>微力同步 verysync</h2><p>这是一款和 syncthing 类似的同步工具。<code>/media/one/versync</code>是我自己的路径，其它人使用前需要更改一下。</p><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  -<span class="ruby">-name verysync \</span></span><br><span class="line"><span class="ruby">  --restart=always \</span></span><br><span class="line"><span class="ruby">  -p <span class="number">8886</span><span class="symbol">:</span><span class="number">8886</span> \</span></span><br><span class="line"><span class="ruby">  -v /media/one/<span class="symbol">versync:</span>/media \</span></span><br><span class="line"><span class="ruby">  lstcml/n1_verysync</span></span><br></pre></td></tr></table></figure><p>这个应用的功能是，可以把一个文件夹，在多台设备之间保持内容同步。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录一些跟小钢炮系统相关的网址、docker 命令等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
      <category term="docker" scheme="https://powersee.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>关于服务器资源取回本地的几种方法</title>
    <link href="https://powersee.github.io/2020/01/three-ways-to-retrieve-the-file/"/>
    <id>https://powersee.github.io/2020/01/three-ways-to-retrieve-the-file/</id>
    <published>2020-01-24T03:14:41.000Z</published>
    <updated>2020-02-23T05:56:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍三种我自己都有用过的方法，都是比较简单的。</p><a id="more"></a><h2 id="一、caddy"><a href="#一、caddy" class="headerlink" title="一、caddy"></a>一、caddy</h2><p> 如同之前的文章所讲到的，安装一个 caddy</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget -<span class="keyword">N</span> --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/ToyoDAdoubi/doubi/master/caddy_install.<span class="keyword">sh</span> &amp;&amp; chmod +<span class="keyword">x</span> caddy_install.<span class="keyword">sh</span> &amp;&amp; bash caddy_install.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p>写入配置</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="comment">":80 &#123;  </span></span><br><span class="line"> root /path/<span class="keyword">to</span>/downloads</span><br><span class="line"> timeouts none  </span><br><span class="line"> gzip  </span><br><span class="line"> <span class="keyword">browse</span>  </span><br><span class="line">&#125;<span class="comment">" &gt; /usr/local/caddy/Caddyfile</span></span><br></pre></td></tr></table></figure><p>启动 caddy</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/caddy start</span></span><br></pre></td></tr></table></figure><p>开放服务器 80 端口</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">ufw allow <span class="number">80</span></span><br></pre></td></tr></table></figure><p>完成后就可以在浏览器里，输入 <code>IP地址</code> 来访问下载好的文件了。如果是 MP4 文件的话，还可以支持在线播放。</p><h2 id="二、h5ai"><a href="#二、h5ai" class="headerlink" title="二、h5ai"></a>二、h5ai</h2><blockquote><p>这是一个 PHP 程序，原本它是要求机器本身有 PHP 才能用的，不过现在使用 docker 来安装的话，也可以非常迅速就安装好。</p></blockquote><p>一行命令即可，最简单</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">docker run -d -p <span class="number">8055</span>:<span class="number">80</span> -v /home/<span class="regexp">tr/download:/h5ai --name h5ai ilemonrain/h</span>5ai:full -d</span><br></pre></td></tr></table></figure><p>装好后在浏览器输入 <code>ip:8085</code> 就可以看到里面的内容</p><h2 id="三、Python-web"><a href="#三、Python-web" class="headerlink" title="三、Python web"></a>三、Python web</h2><p>这个是最简单的，基本所有的服务器都可以，而且不用额外安装其它的程序。只需要在 ssh 时进入到指定的文件夹，然后输入这条命令即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure><p>会默认采用8000端口,此时输入 <strong>IP:8000</strong> 或者 <strong>域名:8000</strong> ，即可访问当前目录下的文件，如果有 <strong>index.html </strong>则会默认加载。</p><p>然后想要停止时，按<code>CTRL + C</code> 取消。<br>不过这种方法有挺多缺点的，比如不支持断点续传，开启时需一直保持 ssh 连接着，显示的文件信息简陋等。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第三种适合于临时下载的，前两种适合长时间的。如果机器本身有装 docker ，那我建议使用第二种。当然第一种也有好处，就是可以绑定指定的域名。</p><p>各取所需吧，适合自己的需求的才是最好的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍三种我自己都有用过的方法，都是比较简单的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="服务器" scheme="https://powersee.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="BT" scheme="https://powersee.github.io/tags/BT/"/>
    
  </entry>
  
  <entry>
    <title>OMV 安装失败如何卸载</title>
    <link href="https://powersee.github.io/2019/12/remove-omv/"/>
    <id>https://powersee.github.io/2019/12/remove-omv/</id>
    <published>2019-12-11T10:25:22.000Z</published>
    <updated>2020-03-23T11:22:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录在 armbian 上安装 omv 失败的过程。</p><a id="more"></a><p>omv 好像不支持在 Debian bust 上面安装，我直接安装后报错了。然后也没法卸载，并且 apt 也没法用了，一用就会提示<code>E: 软件包 openmediavault-omvextrasorg 需要重新安装，但是我无法找到相应的安装文件。</code>苦恼。</p><p>最终解决方法：</p><ol><li><p><code>rm -rf /var/lib/dpkg/info/openmediavault-omvextrasorg*</code></p></li><li><p><code>sudo dpkg --remove --force-remove-reinstreq openmediavault-omvextrasorg</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg: 警告: 由于开启了 --force 选项，以下问题被忽略：</span><br><span class="line">dpkg: 警告: 该软件包现在的状态极为不妥；</span><br><span class="line">建议您在卸载它之前再重新安装一次</span><br><span class="line">(正在读取数据库 ... 系统当前共安装有 112651 个文件和目录。)</span><br><span class="line">正在卸载 openmediavault-omvextrasorg (5.1.9) ...</span><br></pre></td></tr></table></figure></li><li><p>之后再使用 apt 就不会出现问题了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录在 armbian 上安装 omv 失败的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>斐讯 N1、P1 安装 armbian 变身电脑主机</title>
    <link href="https://powersee.github.io/2019/12/N1-armbian/"/>
    <id>https://powersee.github.io/2019/12/N1-armbian/</id>
    <published>2019-12-11T03:44:34.000Z</published>
    <updated>2020-02-23T05:56:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>斐讯 N1 这台设备，我之前一直是使用小钢炮这个系统。因为它非常强大了，可以下载，可以共享硬盘里的文件，还可以玩 docker。</p><p>不过其实这台设备还可以装 Debian 和 Ubuntu 系统的，装好之后就可以变成一台电脑主机了，这想想都兴奋。所以我一直想来尝试一下装 armbian 系统。</p><a id="more"></a><p>镜像下载地址：<a href="https://yadi.sk/d/srrtn6kpnsKz2/Linux/ARMBIAN/" target="_blank" rel="noopener">https://yadi.sk/d/srrtn6kpnsKz2/Linux/ARMBIAN/</a></p><p>但是，其实我之前折腾过很久，一直没法进入启动界面，一次又一次的放弃。早上突然想到会不会是我的写入工具有问题？</p><p>所以改用另外一个将镜像写入 U盘的工具，再试一下。</p><p>结果，还是不行……</p><p>然后仔细看看教程，<a href="https://post.smzdm.com/p/aqnl5kz2/" target="_blank" rel="noopener">这篇文章</a>，难不成得先修改 dtb 才可以启动？试一下，果然如此。需要修改 <strong>uEnv.ini</strong> 这个文件。将第一行的dtb_name后面的文字替换成dtb文件夹里斐讯N1的dtb文件名，保存后再来启动就可以了。</p><p>所以跟用什么工具将镜像写入U盘完全没有关系，用</p><ul><li>usb-image-tool</li><li>win32diskimager</li><li>balenaEtcher</li><li>……</li></ul><p>都是可以的，主要是修改那个文件之后再开机就行。</p><p>之后插入 U盘到机器上，启动，正常进入系统。输入账号 root ，密码 1234 。然后需要设置一个新的密码（至少 8 位数）。</p><p>然后需要再建立一个账号，用来登录桌面系统。主要是用户名和密码，其它可以不用填。之后就可以进入桌面。</p><p>进入桌面系统后，这就是一台电脑主机了，可以上网，看视频，听音乐，编程……</p><p>但是想要更好地使用它，我们还得进行一系列的配置。想折腾可以耗费不少的时间。</p><hr><p>不过，后来我发现恩山有位大佬，直接把他自己修改好的系统打包上传上来，这样我们就可以直接使用他的系统，不用自己去配置了。<a href="https://right.com.cn/forum/thread-1380140-1-1.html" target="_blank" rel="noopener">帖子链接</a></p><p>帖子里有百度网盘的链接，里面主要有三个版本，32G 16G 8G ，指的是用这个系统 U盘最少的容量，如果你 U盘大于或等于 32G，那三个版本都可以用。</p><p>16G 镜像下载下来只有八百多兆，因为里面的软件最少，没有 docker 这些软件。8G 的比较好，安装好了 docker，并且容量适中，3G 多。32G 版本我没有下。</p><p>而且，用官方系统会出现没有 WiFi 的问题，<a href="https://right.com.cn/forum/thread-995217-1-1.html" target="_blank" rel="noopener">这个帖子</a> 有讲到，看来用比较老的系统就可以用 WiFi。而使用恩山大佬打包的系统可以使用 WiFi 👍</p><blockquote><p> 所以我个人的建议是直接使用打包的系统。</p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>不管是使用原生的系统，还是打包的系统，都需要进行下面的配置。</p><h3 id="改源"><a href="#改源" class="headerlink" title="改源"></a>改源</h3><p>默认的软件源可以连接到，但是慢到怀疑人生。把它改为国内的源，这样我们安装或更新软件会快很多。</p><p><strong>改软件源</strong> <a href="https://www.jiayie.xyz/2019/06/26/N1刷入Armbian后换软件源、安装Docker并提速/" target="_blank" rel="noopener">文章链接</a></p><p>vim /etc/apt/sources.list</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.ustc.edu.cn/debian stretch main contrib non-free</span></span><br><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.ustc.edu.cn/debian stretch-updates main contrib non-free</span></span><br><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.ustc.edu.cn/debian stretch-backports main contrib non-free</span></span><br><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.ustc.edu.cn/debian-security/ stretch/updates main contrib non-free</span></span><br></pre></td></tr></table></figure><p><strong>改 armbian 源</strong></p><p>vim /etc/apt/sources.list.d/armbian.list</p><p>将里面的那行注释掉（在前面添加 # ）然后添加这行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/armbian stretch main stretch-utils stretch-desktop</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;斐讯 N1 这台设备，我之前一直是使用小钢炮这个系统。因为它非常强大了，可以下载，可以共享硬盘里的文件，还可以玩 docker。&lt;/p&gt;
&lt;p&gt;不过其实这台设备还可以装 Debian 和 Ubuntu 系统的，装好之后就可以变成一台电脑主机了，这想想都兴奋。所以我一直想来尝试一下装 armbian 系统。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>使用 syncthing 同步多台设备的文件</title>
    <link href="https://powersee.github.io/2019/11/syncthing-better/"/>
    <id>https://powersee.github.io/2019/11/syncthing-better/</id>
    <published>2019-11-30T10:13:05.000Z</published>
    <updated>2020-02-23T05:56:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>又来折腾 syncthing 了，毕竟买了个 10T 的大硬盘，得好好利用起来才行。</p><blockquote><p>syncthing 是一个跨平台、开源的数据同步工具。它可以让你的文件夹，在多台设备保持同步。</p></blockquote><a id="more"></a><h2 id="Syncthing-支持平台"><a href="#Syncthing-支持平台" class="headerlink" title="Syncthing 支持平台"></a>Syncthing 支持平台</h2><p>Syncthing 官方支持 Linux、Windows、OS X、FreeBSD、Solaris 等系统，并且有第三方的 <a href="https://geo.itunes.apple.com/cn/app/fsync/id964427882?mt=8&amp;at=1000l7mq&amp;ct=appinnpost" target="_blank" rel="noopener">iOS</a>、<a href="https://play.google.com/store/apps/details?id=com.nutomic.syncthingandroid" target="_blank" rel="noopener">Android</a> 应用。</p><p>所以利用它，我可以让我手机（Android）的文件，同步到电脑（macOS，Windows）。同时它还可以在 Linux 上用，所以我可以把文件同步到服务器上，也可以同步到刷了<code>小钢炮系统</code>的斐讯 N1 上（系统自带 syncthing）。甚至我可以这些设备全部都使用，确保我的某个文件夹，同步到所有的设备上。（虽然现在没有重要到这样的文件……）</p><p>总之，它是一款很强大的软件，并且还免费开源，很了不起。其实我一年半之前就折腾过了 <a href="/2018/05/syncthing/">之前的文章</a> ，不过说来惭愧，当时折腾了一阵子，就没有再使用它了。因为当时的版本是 0.14 ，很多功能还不完善，并且在 Mac 上面，要使用只能<code>二进制执行文件</code>，并没有做出一个 app ，感觉不太方便。不过我的手机上面一直都有保留着它，即使不怎么使用了。</p><h2 id="现在的变化"><a href="#现在的变化" class="headerlink" title="现在的变化"></a>现在的变化</h2><p>时间过去这么久，这个应用现在更新了很多次，变得越来越好用了。例如：</p><ol><li>有 docker 版本，Linux 上安装起来更加方便</li><li>Windows 和 macOS 都有了 GUI 版本，使用门槛降低</li><li>同步的时候可以选择 仅发送，（而不接收，可以防止对方误操作而导致己方的文件也丢失）</li></ol><p>可能其它的功能我还没有用到，所以并不能更好地体验这个应用，不过就上面这几点，我就挺满意了。</p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>在其官网： <a href="https://syncthing.net/" target="_blank" rel="noopener">syncthing.net</a> 上面可以看到下载链接，不过都是放在 GitHub 上的，可能得用代理才能下载。</p><ul><li><strong>Windows</strong> tray utility, filesystem watcher &amp; launcher: <a href="https://github.com/canton7/SyncTrayzor/releases/latest" target="_blank" rel="noopener">SyncTrayzor</a></li><li><strong>macOS</strong> application bundle: <a href="https://github.com/syncthing/syncthing-macos/releases/latest" target="_blank" rel="noopener">syncthing-macos</a></li><li><strong>Cross-platform</strong> GUI wrapper: <a href="https://github.com/syncthing/syncthing-gtk/releases/latest" target="_blank" rel="noopener">Syncthing-GTK</a></li></ul><p>安卓手机可以去 Google play 搜索。</p><p>我这里主要介绍用 docker 将它装在服务器上面。</p><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -<span class="ruby">-name=syncthing \</span></span><br><span class="line"><span class="ruby">  -e PUID=<span class="number">1000</span> \</span></span><br><span class="line"><span class="ruby">  -e PGID=<span class="number">1000</span> \</span></span><br><span class="line"><span class="ruby">  -e TZ=Asia/Shanghai \</span></span><br><span class="line"><span class="ruby">  -e UMASK_SET=<span class="number">022</span> \</span></span><br><span class="line"><span class="ruby">  -p <span class="number">8384</span><span class="symbol">:</span><span class="number">8384</span> \</span></span><br><span class="line"><span class="ruby">  -p <span class="number">22000</span><span class="symbol">:</span><span class="number">22000</span> \</span></span><br><span class="line"><span class="ruby">  -p <span class="number">21027</span><span class="symbol">:</span><span class="number">21027</span>/udp \</span></span><br><span class="line"><span class="ruby">  -v /home/syncthing/appdata/<span class="symbol">config:</span>/config \</span></span><br><span class="line"><span class="ruby">  -v /home/syncthing/<span class="symbol">data1:</span>/data1 \</span></span><br><span class="line"><span class="ruby">  -v /home/syncthing/<span class="symbol">data2:</span>/data2 \</span></span><br><span class="line"><span class="ruby">  --restart <span class="keyword">unless</span>-stopped \</span></span><br><span class="line"><span class="ruby">  linuxserver/syncthing</span></span><br></pre></td></tr></table></figure><p>这里开放的 webUI 端口为 8384，所以启动成功后到浏览器输入 <code>IP:8384</code> 即可进入管理界面。因为我们是在服务器上使用，一定要设置用户，不然别人随便输入你的 IP:8384 就可以来管理你的设备了，很不安全。如果是在家里使用的话，例如群晖，或者和我一样使用 小钢炮 ，那不用设置也没多大问题。</p><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>这里的添加用户，可以理解成和微信的添加好友相似。两台设备需要添加好友了才能互相发送文件，而要添加可以使用 <strong>二维码</strong> ，也可以使用 <strong>ID</strong> 。这里我以服务器作为被添加的设备。</p><p>点击右上角的 【操作】➡️【显示 ID 】即可看到。如果手机想添加这台设备，打开应用后，向左滑来到设备这里，点右上角的 ➕ ，然后点击二维码就可以扫码了。如果是电脑，就只能用 ID 的方式来添加了。点右下角的【添加远程设备】然后输入服务器的 ID 即可。</p><h2 id="同步文件"><a href="#同步文件" class="headerlink" title="同步文件"></a>同步文件</h2><p>这里我以手机文件同步到服务器为例。在手机上向右滑来到左边的 文件夹 这里。点击右上角的 ➕ 。文件夹标签可以随便起，目录选择要同步的文件夹，要同步到哪台设备，就把那台设备的开关打开。这样手机端的设置就完成了。</p><p>然后过一会服务器的就会收到通知，我们可以在浏览器的 webUI 里看到，提示某某人分享一个某某文件夹给你，是否接受。接受时可以设置要把这个文件夹放在哪里。</p><p>这样设置好后，就只需要等待了，手机会慢慢地把文件上传到服务器里。因为这个应用是使用 端–端 加密的，所以不用怕被中间人知道你在传输什么，不过可能也是因为这个原因吧，感觉传输的速度不是那么快，最高好像只能达到 2M/s 。</p><p>当然这个过程也是可以反过来的，把服务器的文件同步到手机上。</p><p>我本来是打算尝试一下，把服务器里 qbittorrent 下载好的文件，利用这个应用取回手机。但是，速度实在太慢了，虽然最大时能有 2M/s ，但是大部分时间都是几百 k 的速度。如果设置成服务器下载完，让它同步到我的小钢炮里面就还行，毕竟两台设备都是 24 小时开机。但是手机就没必要了，非要把文件取回手机，我还是选择开启一个临时的 HTTP 服务。</p><h2 id="暂时我的使用方案"><a href="#暂时我的使用方案" class="headerlink" title="暂时我的使用方案"></a>暂时我的使用方案</h2><p>我目前的使用有两个</p><ol><li>把手机的微信下载内容，同步到小钢炮。</li><li>把手机里用 vue 这个软件拍的视频，同步到电脑（用于在电脑剪辑）</li></ol><p>以后想到其它玩法再来更新。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又来折腾 syncthing 了，毕竟买了个 10T 的大硬盘，得好好利用起来才行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;syncthing 是一个跨平台、开源的数据同步工具。它可以让你的文件夹，在多台设备保持同步。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="服务器" scheme="https://powersee.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>nds 游戏存档导入到电脑的模拟器玩</title>
    <link href="https://powersee.github.io/2019/11/nds2desmume/"/>
    <id>https://powersee.github.io/2019/11/nds2desmume/</id>
    <published>2019-11-27T06:52:54.000Z</published>
    <updated>2020-02-23T05:56:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>我有这么个需求，之前在 nds 上面用 R4 卡玩的游戏存档，想把它复制到电脑上，然后在电脑上用模拟器继承存档，继续玩之前的进度。但它并不是直接复制过来就可以用的。</p><a id="more"></a><p>用 desmume 这个 nds 游戏模拟器，它在游戏中正常保存后的存档格式为 .dsv</p><p>而用 nds 加 R4 卡来玩游戏，正常保存后，存档文件的后缀为 .SAV </p><p>这样就没法这边打完，就把存档复制到那边，然后继续玩。</p><p>不过现在（其实应该是好几年前了）模拟器已经支持把  .SAV 文件导入模拟器了。有一个选项，可以导入 sav 格式的存档，然后把它转换为 dsv 格式。</p><h2 id="把-nds-的存档复制到模拟器上用"><a href="#把-nds-的存档复制到模拟器上用" class="headerlink" title="把 nds 的存档复制到模拟器上用"></a>把 nds 的存档复制到模拟器上用</h2><p>在菜单里面可以导入存档（import开头的），然后选择sav格式的存档，导入之后将会被转换为 dsv 格式的存档。</p><p>在mac中导入是这样的<br><img src="/img/2019/mac-import.png" alt=""><br>在win中导入是这样的</p><p><img src="/img/2019/win-des.jpg" alt=""></p><p>但是，问题来了，我一开始是在 mac 上用的，导入是成功了，但是游戏中存档位置是空的。百思不得其解，最终我决定到 windows 上试一下。</p><p>果然，只有 windows 版的才行，导入后会跳出一个选项，问要转换为什么类型，我就直接选默认的第一个，就成功在游戏中看到存档了。</p><p>而在 mac 里，导入时并没有这些选择，所以导入后也识别不到，暂时无解。非要在 mac 上玩的话，就只能先在 windows 里导入，再导出（或者复制出 dsv 文件），再把这个 dsv 文件复制到 mac 上面用。</p><h2 id="模拟器的存档复制到-nds-上用"><a href="#模拟器的存档复制到-nds-上用" class="headerlink" title="模拟器的存档复制到 nds 上用"></a>模拟器的存档复制到 nds 上用</h2><p>刚才游戏中有个地方需要多次尝试，用模拟器的快速存档和读档会比较快。所以我把存档复制到电脑上，导入后游玩，用读取大法很快就过了关卡。</p><p>然后我不想一直在电脑用模拟器玩，所以想把存档导出， 复制到 nds 上玩。这个就没什么难度了。选择 <code>Export Rom Save File</code> 然后选择 sav 格式。导出并复制到 nds 的内存卡上即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我有这么个需求，之前在 nds 上面用 R4 卡玩的游戏存档，想把它复制到电脑上，然后在电脑上用模拟器继承存档，继续玩之前的进度。但它并不是直接复制过来就可以用的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="游戏" scheme="https://powersee.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>即使是使用 ipv6 也最好做好防范，ip6tables 与 ss</title>
    <link href="https://powersee.github.io/2019/11/ip6tables-and-ss/"/>
    <id>https://powersee.github.io/2019/11/ip6tables-and-ss/</id>
    <published>2019-11-25T04:43:28.000Z</published>
    <updated>2020-02-23T05:56:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到好多个人，因为开放群晖的端口号，导致宽带被封，运营商给出的原因是：未备案个人宽带不允许提供 web 服务……</p><a id="more"></a><p>这里有一个案例：<a href="https://koolshare.cn/thread-170517-1-1.html" target="_blank" rel="noopener">重要消息：上海电信对于绑定域名用于WEB服务的 直接封宽带</a></p><p>所以现在哪怕我只是开放给自己使用而已，也不行了。其实之前也是不允许的，不过运营商会把 80 端口和 443 端口给封了，这样我们就无法在家里搭建网站了。不过严格来讲还是可以的，只不过得在域名后面加个端口号，例如这样</p><blockquote><p><a href="http://www.baidu.com:12345" target="_blank" rel="noopener">www.baidu.com:12345</a></p></blockquote><p>但是现在这种也不允许了，而且一经发现，直接封了你的宽带。除非你自己去电信询问，否则都不知道为什么封的。没错，现在只有电信会封，而且看网友的讨论，好像只有 <strong>上海、深圳</strong> 这两个地方的<strong>电信宽带</strong>才会。</p><p>那么我是用 移动宽带 的，我需要担心吗？之前我是觉得不需要担心的，毕竟等网上别人出事的时候，我在网上看到别人的帖子，我再来开启防火墙就行了。</p><p>然而，我又一想，我怎么知道我不会是，移动用户中第一批遭殃的呢？所以我赶紧又打开我路由器的防火墙。</p><p>但我还是想享受外网访问的便捷性，所以我得来想想对策。</p><h3 id="之前的"><a href="#之前的" class="headerlink" title="之前的"></a>之前的</h3><p>我之前的话，是直接关闭防火墙，这样我就可以通过 ipv6 ，在外面访问宿舍的设备，主要有：</p><ol><li>进入路由器查看一下情况</li><li>访问刷了小钢炮系统的斐讯 N1 盒子，查看系统的负载，管理里面 qbittorrent 的下载</li><li>有时候电脑用虚拟机开着一台 Ubuntu 服务器，需要外网 ssh 连接</li></ol><p>所以这上面三台主机里面，我都有运行 ddns 脚本，让它们把自身的 ipv6 地址与我在阿里云申请的域名进行绑定。这样我就可以通过三个不同的域名访问这些主机。但是也麻烦，再添加机器我就得再去添加脚本，并且记住域名，所以我更改了方案。</p><h3 id="现在的"><a href="#现在的" class="headerlink" title="现在的"></a>现在的</h3><p>我直接开启 padavan 系统的路由器里面的 ss_server ，之后我在外面要访问内网的设备时，就用 ss 连接我的路由器，这时就相当于把它当 VPN 来使用。我想要管理路由器，可以直接在浏览器输入 <code>192.168.123.1</code> 而不用去输入域名，管理其它设备也一样，直接输入局域网 IP 即可。</p><p>但是，这一切，还是建立在我把防火墙关闭了的情景下，这样我的宽带还是有被封的风险。我想要开启防火墙，但同时我还可以连接到内网的设备。所以，我了解了一下 <code>ip6tables</code> ，这个是管理 ipv6 的防火墙软件，详情可以看这里 <a href="https://man.linuxde.net/ip6tables" target="_blank" rel="noopener">ip6tables详细使用说明</a></p><p>但我用到不多，现在外界访问只通过一个端口，就是 ss_server 开放的那个端口，默认为 8388 ，所以我只需要开放这个端口即可。需要做的，是通过 ssh 连接路由器，或者直接在 高级设置，系统管理，控制台 输入这 3 条命令。</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">ip6tables -A FORWARD -<span class="selector-tag">p</span> tcp --dport <span class="number">8388</span> -j ACCEPT</span><br><span class="line">ip6tables -A INPUT -<span class="selector-tag">p</span> tcp --dport <span class="number">8388</span> -j ACCEPT</span><br><span class="line">ip6tables -A OUTPUT -<span class="selector-tag">p</span> tcp --dport <span class="number">8388</span> -j ACCEPT</span><br></pre></td></tr></table></figure><p>这样外网就只能通过 8388 这个端口来访问内网，而且只能用 ss 连接才行，直接在浏览器输入我 IP 加 8388 肯定不行，因为我根本没有开启 web 服务。所以应该是不会有宽带被封的风险。</p><p>但是这样有一个问题，就是当我路由器重启之后，就失效了，只能重新到控制台再输入一次。能否让它开机后自动执行呢？</p><p>可以的，需要到【高级设置】——【自定义设置】——【脚本】里添加。由于我使用的是 hiboy 大佬修改的 padavan 系统，所以里面有好几个脚本。如果是其他人的固件估计没这个功能。</p><p>那么这里我可以把上面的三条命令，放在【在路由器启动后执行】这个脚本里，也可以放在【在防火墙规则启动后执行】里。我个人是选择后者。</p><p>将命令粘贴进去后，点击下方的【应用本页设置】即可。这样以后重启路由器后，就会自动执行这三条命令。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看到好多个人，因为开放群晖的端口号，导致宽带被封，运营商给出的原因是：未备案个人宽带不允许提供 web 服务……&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何让 qBittorrent 在 Linux 上连接更多的 tracker</title>
    <link href="https://powersee.github.io/2019/11/qb-more-tracker/"/>
    <id>https://powersee.github.io/2019/11/qb-more-tracker/</id>
    <published>2019-11-10T09:02:48.000Z</published>
    <updated>2020-02-23T05:56:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于 Linux 上的 qBittorrent，它不同于我们在 Windows 和 Mac 上的桌面版，我们只能通过 web 来管理，基本的功能都一样，但是有一个问题比较麻烦，就是无法打开<strong>高级设置</strong>里的【总是向所有等级的 Tracker 汇报】。</p><a id="more"></a><p>❗️❗️注意，qb 4.2 以及之后的版本，webUI 已经可以管理<strong>高级设置</strong>了，所以想简单的，可以升级版本即可。我个人的建议也是直接升级即可，不过如果因为有特殊原因没法升级，可以继续看下面的方法折腾。</p><p>这对于我们下载 BT 任务，影响就比较大了。</p><p>但是在研究一番之后，我还是成功的开启了这个功能。</p><p>我的思路是这样的，Linux 上的 qb，它有一个配置文件：<code>qBittorrent.conf</code> ，我通过修改这个文件，应该也是可以开启这个功能的。但是，我不知道添加什么语句，才能开启。所以我想到看一下我电脑的 qb 配置文件，来参考一下。</p><p>那么我先查看一下我 Mac 上的配置文件：<code>qBittorrent.ini</code> ，它在用户目录下的隐藏文件夹<code>.config</code>里面，在这个文件里面，我找到了这一句</p><figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">Advanced\AnnounceToAllTrackers=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>它是放在 <code>[Preferences]</code>下面的，那么按理，我在 Linux 上也添加这一句，就可以开启这个功能了。</p><p>Linux 上可能不同的发行版本，它配置文件的位置有可能不同，想我的 N1 小钢炮，它的配置文件是在这的：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">/var/<span class="class"><span class="keyword">lib</span>/<span class="title">qbittorrent</span>/.<span class="title">config</span>/<span class="title">qBittorrent</span>/<span class="title">qBittorrent</span>.<span class="title">conf</span></span></span><br></pre></td></tr></table></figure><p>而我之前用脚本安装的 qb ，它的配置文件是在 home 目录下的某个位置，而如果在 docker 上面，它在容器中的位置可能也不一样吧。所以如果找不到，可以全局搜索一下：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -name qBittorrent.conf</span><br></pre></td></tr></table></figure><p>找到之后，用 vim 编辑这个文件，添加</p><figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">Advanced\AnnounceToAllTrackers=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>保存，重启 qb（不会的话就重启机器）</p><p>然后就成功了，此时 qb 在下 BT 任务时，就可以连接多个 tracker 了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于 Linux 上的 qBittorrent，它不同于我们在 Windows 和 Mac 上的桌面版，我们只能通过 web 来管理，基本的功能都一样，但是有一个问题比较麻烦，就是无法打开&lt;strong&gt;高级设置&lt;/strong&gt;里的【总是向所有等级的 Tracker 汇报】。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="下载" scheme="https://powersee.github.io/tags/%E4%B8%8B%E8%BD%BD/"/>
    
      <category term="BT" scheme="https://powersee.github.io/tags/BT/"/>
    
  </entry>
  
  <entry>
    <title>关于玩客云的一些资料</title>
    <link href="https://powersee.github.io/2019/10/about-wankeyun/"/>
    <id>https://powersee.github.io/2019/10/about-wankeyun/</id>
    <published>2019-10-30T05:38:07.000Z</published>
    <updated>2020-02-23T05:56:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>玩客云能做什么？1、下载迅雷可以下载的内容。2、当私人网盘来使用，出门在外时，也可访问家中硬盘中的文件。</p><p>那它有什么缺点？最大的缺点是，会不停往硬盘存东西。因此会加大硬盘损耗，以及占用带宽。</p><p>下面是关于玩客云，个人收集的一些资料。</p><a id="more"></a><h2 id="问：现在入手什么版本最好啊？（这个是几个月前的回答了，现在没什么用，一律买最便宜的就行）"><a href="#问：现在入手什么版本最好啊？（这个是几个月前的回答了，现在没什么用，一律买最便宜的就行）" class="headerlink" title="问：现在入手什么版本最好啊？（这个是几个月前的回答了，现在没什么用，一律买最便宜的就行）"></a>问：现在入手什么版本最好啊？（这个是几个月前的回答了，现在没什么用，一律买最便宜的就行）</h2><ul><li><p>看你的用途吧。。。想要挖矿的就去买开了挖矿的，不需要挖矿、只想下载和当网盘用的买退出挖矿的或者未拆封的，要刷机或者装组件(如transmission、apache、nginx、php、mysql等)玩的买root的。</p></li><li><p>之前买了一个全新未拆封的，没有开通链克计划，硬盘是可以休眠的</p></li></ul><h2 id="玩客云限制上传的方法（最好电脑上操作）"><a href="#玩客云限制上传的方法（最好电脑上操作）" class="headerlink" title="玩客云限制上传的方法（最好电脑上操作）"></a>玩客云限制上传的方法（最好电脑上操作）</h2><ul><li><p>1、显示隐藏的文件，看到一个.onething_data的文件夹，删除了。</p></li><li><p>2、打开记事本，什么都不需要，直接另存为—保存类型选择为所有文件，文件名为.onething_data</p></li><li><p>丢到玩客云硬盘的根目录上，设置为只读的属性，完事。</p></li><li><ul><li>反正我这么搞，不会上班，远程访问也没毛病，一天还有0.几个蛋。大不了被绝育，能下载，能当家庭云用就行！</li></ul></li></ul><hr><p>很多人不满玩客云一直读写硬盘的这种行为，于是申请退出玩客链计划，当时想退出却没那么容易。因为迅雷要求你必须手持身份证，拍一张照片给他们，才愿意帮你退出计划。这想想还是挺可怕，谁知道照片会被拿去干什么事啊。但是在 张大妈 有这样一个有趣的例子。</p><p>与客服互怼成功拒绝提供身份证</p><p><a href="https://post.smzdm.com/p/az59706n/" target="_blank" rel="noopener">https://post.smzdm.com/p/az59706n/</a></p><p>同时这上面还有一篇非常详细的评测</p><p><a href="https://post.smzdm.com/p/aw3np922/" target="_blank" rel="noopener">https://post.smzdm.com/p/aw3np922/</a></p><p>B 站上面也有教</p><p><span style="color: rgb(34, 34, 34);">不让其不停读取硬盘的四种方案（</span><a href="https://www.bilibili.com/video/av53589623" target="_blank" rel="noopener">https://www.bilibili.com/video/av53589623</a><span style="color: rgb(34, 34, 34);">）</span></p><ul><li><p><span style="color: rgb(34, 34, 34);">① .onething_data文件夹封闭 具体操作看之前视频</span></p></li><li><p><span style="color: rgb(34, 34, 34);">② 发邮件退出玩客云奖励计划</span></p></li><li><p><span style="color: rgb(34, 34, 34);">③ 用闲置U盘或TF卡做主盘避免写入机械硬盘</span></p></li><li><p><span style="color: rgb(34, 34, 34);">④ 不用时弹出硬盘 使用时远程重启</span></p></li></ul><h2 id="用-Linux-禁止其读写的方法：（此方法本人测试无效，因为玩客云根本不能识别-ext4-格式的硬盘）"><a href="#用-Linux-禁止其读写的方法：（此方法本人测试无效，因为玩客云根本不能识别-ext4-格式的硬盘）" class="headerlink" title="用 Linux 禁止其读写的方法：（此方法本人测试无效，因为玩客云根本不能识别 ext4 格式的硬盘）"></a>用 Linux 禁止其读写的方法：（此方法本人测试无效，因为玩客云根本不能识别 ext4 格式的硬盘）</h2><ul><li><span style="color: rgb(34, 34, 34);">直接第一种覆盖就行 而且他不会改回来 但是需要把硬盘搞成ext4 同时设置该文件的用户组为root 再修改文件属性不可修改 以上操作在linux下进行</span></li></ul><h2 id="挂载到电脑的方法："><a href="#挂载到电脑的方法：" class="headerlink" title="挂载到电脑的方法："></a>挂载到电脑的方法：</h2><ul><li>Win + r 输入 //ip</li></ul><h2 id="我个人对于这台设备的评价"><a href="#我个人对于这台设备的评价" class="headerlink" title="我个人对于这台设备的评价"></a>我个人对于这台设备的评价</h2><p>我认为，对于下载，有这台设备还是不错的，因为它让我们在没有迅雷会员的情况下，也可以高速下载。当然前提是你下载的资源迅雷的服务器里面有。不过随着现在版权管理越来越严，迅雷能下载的东西也越来越少了。</p><p>对于当私人云盘，我看有人专门买两台这个来当私人云盘，不过买的硬盘盒都比机器贵。我个人是不会把手机的图片、视频放这的，不太敢，也没必要。</p><p>所以这台机器对我确实没多大用处，大多数情况下都是出于吃灰状态。不过也无所谓了，五六十块钱的东西，买来折腾折腾过过瘾也就值得了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;玩客云能做什么？1、下载迅雷可以下载的内容。2、当私人网盘来使用，出门在外时，也可访问家中硬盘中的文件。&lt;/p&gt;
&lt;p&gt;那它有什么缺点？最大的缺点是，会不停往硬盘存东西。因此会加大硬盘损耗，以及占用带宽。&lt;/p&gt;
&lt;p&gt;下面是关于玩客云，个人收集的一些资料。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小钢炮又被折腾坏记录，最终成功用上 zsh</title>
    <link href="https://powersee.github.io/2019/10/nano-zsh/"/>
    <id>https://powersee.github.io/2019/10/nano-zsh/</id>
    <published>2019-10-26T11:31:39.000Z</published>
    <updated>2020-02-23T05:56:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚才给小钢炮安装了 zsh ，这个过程还是有点复杂的，不过好在都能找到教程。</p><a id="more"></a><h2 id="1、先去看灯大的这个文章"><a href="#1、先去看灯大的这个文章" class="headerlink" title="1、先去看灯大的这个文章"></a>1、先去看灯大的这个文章</h2><p><a href="https://gitee.com/8ox86/phicomm-n1-issue/wikis/entware%20guide?sort_id=1368793" target="_blank" rel="noopener">https://gitee.com/8ox86/phicomm-n1-issue/wikis/entware%20guide?sort_id=1368793</a></p><p>让我们可以用 opkg2 来安装其它应用</p><h2 id="2、安装-zsh-与配置集"><a href="#2、安装-zsh-与配置集" class="headerlink" title="2、安装 zsh 与配置集"></a>2、安装 zsh 与配置集</h2><p>于是我就安装了 zsh 以及 oh my zsh 为的就是用这个自动补全插件 zsh-autosuggestions</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">opkg2 <span class="keyword">install</span> zsh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone git:<span class="regexp">//gi</span>thub.com<span class="regexp">/zsh-users/</span>zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span><span class="regexp">/plugins/</span>zsh-autosuggestions</span><br></pre></td></tr></table></figure><h2 id="3、遇坑部分，无法-ssh-连接"><a href="#3、遇坑部分，无法-ssh-连接" class="headerlink" title="3、遇坑部分，无法 ssh 连接"></a>3、遇坑部分，无法 ssh 连接</h2><p>顺利地安装成功了，然后，我想将 zsh 设置为默认的 shell ，使用 chsh -s /opt/bin/zsh 却失败了。</p><p>然后网上找其它方法，看到有个是修改 /etc/passwd 这个文件，第一行就是 root 用户的默认 shell 路径，于是用 vim 修改这个文件，改为 zsh 的路径，然后退出，再重新 ssh 连接，就登录不了了……</p><p><img src="/img/2019/can&#39;t login after edit the passwd.jpg" alt=""></p><p>本想这次扑街了，又得重装系统了，可惜 qb 的配置没有备份……</p><h2 id="4、想办法备份"><a href="#4、想办法备份" class="headerlink" title="4、想办法备份"></a>4、想办法备份</h2><p>于是想办法看看能不能备份出来，不然重装系统后所有记录都没了。想到 qb 的配置文件是放在 /var/lib/qbittorrent 这个文件夹里的，之前我是 ssh 之后，把复制到自己的硬盘的。现在无法 ssh，得另寻方法。</p><p>于是想到小钢炮的 web 界面有个定时任务的功能 Scheduled Tasks ，在这个我也可以执行命令啊，那我在这里备份这个文件夹不就行了。</p><p>同时灯大的 wiki 里也有写备份 qb 和 tr 的方法，他是用 tar 来打包这个文件夹的，这种可能更好吧。</p><p>于是我添加了这条任务，每十五分钟就将这两个文件夹打包备份到我这个叫 one 的硬盘里。</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="number">15</span> * * * * tar cvf /media/one/qb.tar /var/<span class="class"><span class="keyword">lib</span>/<span class="title">qbittorrent</span> &amp;&amp; <span class="title">tar</span> <span class="title">cvf</span> /<span class="title">media</span>/<span class="title">one</span>/<span class="title">tr</span>.<span class="title">tar</span> /<span class="title">var</span>/<span class="title">lib</span>/<span class="title">transmission</span></span></span><br></pre></td></tr></table></figure><h2 id="5、曲线救国"><a href="#5、曲线救国" class="headerlink" title="5、曲线救国"></a>5、曲线救国</h2><p>所以这样打包好后，就可以重装系统了嘛。不过我突然想到，既然这里可以执行命令，那我在这里修改 passwd 这个文件，改回去不就行了？</p><p>于是我将 passwd 这个文件的内容，输出到硬盘里</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>passwd &gt; <span class="regexp">/media/</span>one<span class="regexp">/pass.txt</span></span><br></pre></td></tr></table></figure><p>接着我用 filebrowser 修改这个文档里面的内容，再把它输入回 passwd</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/media/</span>one<span class="regexp">/pass.txt &gt; /</span>etc<span class="regexp">/passwd</span></span><br></pre></td></tr></table></figure><p>完成，再来 ssh ，就成功登录上了。</p><p>但是我的 zsh 还是没办法设置为默认 shell ……</p><p>怎么办呢？</p><h2 id="6、用上-zsh"><a href="#6、用上-zsh" class="headerlink" title="6、用上 zsh"></a>6、用上 zsh</h2><p>我想到，当我们用 ssh 连接上小钢炮的 sh 时，它会去执行 /etc/prifile 这个文件里面的内容，那我直接在这里面添加一行</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">zsh</span></span><br></pre></td></tr></table></figure><p>我将它放在环境变量之后，在 13 行这个位置。这样之后用 ssh 连接，系统就会先启动 sh ，然后读取 /etc/prifile 的内容，读到 13 行，执行了 zsh 这个命令，然后 shell 就自动切换到 zsh 了。</p><p>由于这个过程很快，我们不可能看到，所以一连接上看到的就是 zsh 了。完美！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚才给小钢炮安装了 zsh ，这个过程还是有点复杂的，不过好在都能找到教程。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小米手机免 root 去除广告以及卸载系统应用</title>
    <link href="https://powersee.github.io/2019/09/MIUI-adb/"/>
    <id>https://powersee.github.io/2019/09/MIUI-adb/</id>
    <published>2019-09-18T03:27:35.000Z</published>
    <updated>2020-03-23T11:22:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文需在电脑上进行。</p><a id="more"></a><h2 id="手机打开-USB-调试"><a href="#手机打开-USB-调试" class="headerlink" title="手机打开 USB 调试"></a>手机打开 USB 调试</h2><p>以及 USB 调试（安全模式）</p><h2 id="下载-ADB-工具"><a href="#下载-ADB-工具" class="headerlink" title="下载 ADB 工具"></a>下载 ADB 工具</h2><p><a href="http://veger.ys168.com/" target="_blank" rel="noopener">http://veger.ys168.com/</a><br>在电脑软件这个文件夹里</p><p>解压后把三个文件，解压到 <code>C:\Windows\</code>里面</p><h2 id="安装小米刷机工具（安装手机驱动）"><a href="#安装小米刷机工具（安装手机驱动）" class="headerlink" title="安装小米刷机工具（安装手机驱动）"></a>安装小米刷机工具（安装手机驱动）</h2><p><a href="http://bigota.d.miui.com/tools/MiFlash2018-5-28-0.zip" target="_blank" rel="noopener">http://bigota.d.miui.com/tools/MiFlash2018-5-28-0.zip</a></p><h2 id="电脑打开-cmd"><a href="#电脑打开-cmd" class="headerlink" title="电脑打开 cmd"></a>电脑打开 cmd</h2><p>删除应用的 ADB 命令是：<br><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> 应用包名</span><br></pre></td></tr></table></figure></p><p>（MIUI 9、MIUI 10 测试删除后能正常开机使用）<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">adb shell pm uninstall --user <span class="number">0</span>  com<span class="selector-class">.miui</span><span class="selector-class">.systemAdSolution</span> （小米系统广告解决方案 必删）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span>  com<span class="selector-class">.miui</span><span class="selector-class">.analytics</span> （小米广告分析，必删）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.xiaomi</span><span class="selector-class">.gamecenter</span><span class="selector-class">.sdk</span><span class="selector-class">.service</span> （小米游戏中心服务）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.xiaomi</span><span class="selector-class">.gamecenter</span> （小米游戏中心）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.sohu</span><span class="selector-class">.inputmethod</span><span class="selector-class">.sogou</span><span class="selector-class">.xiaomi</span> （搜狗输入法）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.player</span> （小米音乐）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.video</span> （小米视频）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.notes</span> （小米便签）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.translation</span><span class="selector-class">.youdao</span> （有道翻译）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.translation</span><span class="selector-class">.kingsoft</span> （金山翻译）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.android</span><span class="selector-class">.email</span> （邮件）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.xiaomi</span><span class="selector-class">.scanner</span> （小米扫描）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.hybrid</span> （混合器）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.bugreport</span> （bug 反馈）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.milink</span><span class="selector-class">.service</span> （米连服务）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.android</span><span class="selector-class">.browser</span> （浏览器）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.gallery</span> （相册）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.yellowpage</span> （黄页）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.xiaomi</span><span class="selector-class">.midrop</span> （小米快传）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.virtualsim</span> （小米虚拟器）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.xiaomi</span><span class="selector-class">.payment</span> （小米支付）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.mipay</span><span class="selector-class">.wallet</span> （小米钱包）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.android</span><span class="selector-class">.soundrecorder</span> （录音机）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.screenrecorder</span> （屏幕录制）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.android</span><span class="selector-class">.wallpaper</span> （壁纸）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.voiceassist</span> （语音助手）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.fm</span> （收音机）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.touchassistant</span> （悬浮球）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.android</span><span class="selector-class">.cellbroadcastreceiver</span> （小米广播）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.xiaomi</span><span class="selector-class">.mitunes</span> （小米助手）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.xiaomi</span><span class="selector-class">.pass</span> （小米卡包）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.android</span><span class="selector-class">.thememanager</span> （个性主题管理）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.android</span><span class="selector-class">.wallpaper</span> （动态壁纸）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.android</span><span class="selector-class">.wallpaper</span><span class="selector-class">.livepicker</span> （动态壁纸获取）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.klo</span><span class="selector-class">.bugreport</span> （KLO bug 反馈）</span><br></pre></td></tr></table></figure></p><p>前面两个是 MIUI 系统支撑广告及精准化推送的应用，应第一时间删除，删除后不会出现无法开机的情况。这样 MIUI 系统的广告就会少很多——没有验证是否完全屏蔽。  </p><p><strong>【警告】以下系统自带应用删除后必定无法正常开机（来自网络），请避免误删：</strong>  </p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">com<span class="selector-class">.miui</span><span class="selector-class">.cloudservice</span> （小米云服务）  </span><br><span class="line">com<span class="selector-class">.xiaomi</span><span class="selector-class">.account</span> （小米账户）  </span><br><span class="line">com<span class="selector-class">.miui</span><span class="selector-class">.cloudbackup</span> （云备份）  </span><br><span class="line">com<span class="selector-class">.xiaomi</span><span class="selector-class">.market</span> （应用市场）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文需在电脑上进行。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>服务器搭建全能下载器 Aria2 以及私人网盘，只需一行命令（docker）</title>
    <link href="https://powersee.github.io/2019/09/docker-aria2/"/>
    <id>https://powersee.github.io/2019/09/docker-aria2/</id>
    <published>2019-09-16T11:40:18.000Z</published>
    <updated>2020-03-28T01:07:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将利用 docker 一键安装 Aria2 和 filebrowser。</p><a id="more"></a><p>建议搭配之前的文章来观看：<a href="/2019/08/docker-qb">用服务器来离线下载 BT 种子，体验千兆网络的魅力</a></p><p><a href="https://github.com/wahyd4/aria2-ariang-docker/blob/master/README.CN.md" target="_blank" rel="noopener">项目 GitHub 地址</a></p><h3 id="安装-docker-如果机器没有的话）"><a href="#安装-docker-如果机器没有的话）" class="headerlink" title="安装 docker(如果机器没有的话）"></a>安装 docker(如果机器没有的话）</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">curl -sSL http<span class="variable">s:</span>//<span class="built_in">get</span>.docker.<span class="keyword">com</span>/ | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure><h3 id="最快速启动"><a href="#最快速启动" class="headerlink" title="最快速启动"></a>最快速启动</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">docker run -d --name aria2-ui -v <span class="regexp">/home/</span><span class="string">down:</span><span class="regexp">/data -p 80:80 wahyd4/</span>aria2-ui</span><br></pre></td></tr></table></figure><ul><li>Aria2: <a href="http://yourip/ui/" target="_blank" rel="noopener">http://yourip/ui/</a></li><li>FileManger: <a href="http://yourip" target="_blank" rel="noopener">http://yourip</a></li><li>请使用 admin/admin 进行登录</li></ul><p>这样下载的文件都放在 <code>/home/down</code> 这个文件夹里面</p><p>文件夹没有写入权限，有兴趣看这篇文章了解 <a href="https://note.qidong.name/2018/01/docker-volume-permission/" target="_blank" rel="noopener">文章链接</a><br>不管原理，无脑给予 777</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">777</span> /<span class="built_in">home</span>/down</span><br></pre></td></tr></table></figure><p>强制删除容器</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> rm -f aria2-ui</span><br></pre></td></tr></table></figure><h3 id="加密下载界面"><a href="#加密下载界面" class="headerlink" title="加密下载界面"></a>加密下载界面</h3><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">docker run -d --name ariang \</span><br><span class="line">  -<span class="ruby">p <span class="number">80</span><span class="symbol">:</span><span class="number">80</span> \</span></span><br><span class="line"><span class="ruby">  -e PUID=<span class="number">1000</span> \</span></span><br><span class="line"><span class="ruby">  -e PGID=<span class="number">1000</span> \</span></span><br><span class="line"><span class="ruby">  -e ENABLE_AUTH=<span class="literal">true</span> \</span></span><br><span class="line"><span class="ruby">  -e RPC_SECRET=Hello \</span></span><br><span class="line"><span class="ruby">  -e ARIA2_SSL=<span class="literal">false</span> \</span></span><br><span class="line"><span class="ruby">  -e ARIA2_USER=user \</span></span><br><span class="line"><span class="ruby">  -e ARIA2_PWD=pwd \</span></span><br><span class="line"><span class="ruby">  -v /home/<span class="symbol">down:</span>/data \</span></span><br><span class="line"><span class="ruby">  wahyd4/aria2-ui</span></span><br></pre></td></tr></table></figure><ul><li>用户名：user</li><li>密码：pwd</li></ul><h3 id="后续补充"><a href="#后续补充" class="headerlink" title="后续补充"></a>后续补充</h3><p>根据个人的需求来选择，如果觉得不需要加密 Aria2 的管理界面的，其实用第一种方式就行了。非常简单，一行命令即可。</p><p>同时也可以结合 APP ：Transdrone_2.5.15.apk 来使用，这个我放在网盘里，使用它来管理多个下载工具也是比较方便的。</p><p><a href="http://veger.ys168.com/" target="_blank" rel="noopener">http://veger.ys168.com/</a></p><p><img src="https://i.loli.net/2019/09/30/SZ4jLRqiB5dzNgF.png" alt="transdrone"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将利用 docker 一键安装 Aria2 和 filebrowser。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://powersee.github.io/tags/docker/"/>
    
      <category term="下载" scheme="https://powersee.github.io/tags/%E4%B8%8B%E8%BD%BD/"/>
    
      <category term="BT" scheme="https://powersee.github.io/tags/BT/"/>
    
  </entry>
  
  <entry>
    <title>BT挂机利器 transmission docker 安装法</title>
    <link href="https://powersee.github.io/2019/09/transmission-docker/"/>
    <id>https://powersee.github.io/2019/09/transmission-docker/</id>
    <published>2019-09-07T14:11:40.000Z</published>
    <updated>2020-03-28T01:06:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何在服务器上安装 docker，并安装 transmission 来下载 BT 种子任务。并且取回本地。</p><a id="more"></a><blockquote><p>要想进行下面的操作，需要有一个服务器，如果你没有的话， <a href="https://www.vultr.com/?ref=8161953-4F" target="_blank" rel="noopener">点此链接注册充值 10 美元送 50 美元</a><br>送的 50美元只有一个月的有效期。（所以不要省，开贵点的机器吧）</p></blockquote><p>上次已经用 docker 安装了 qbittorrent，这是一个非常强大的 BT 软件，我个人是非常喜欢的。但是，它占的内存比较大，如果服务器还要做一些其它的工作，用这个可能就不太合适了。</p><p><img src="https://i.loli.net/2019/09/10/lJAEmdBpbHKe4u5.png" alt="qb speed"></p><p>于是， transmission 是一个不错的选择。它对硬件的配置要求非常的低，甚至在路由器上面都可以运行。</p><blockquote><p>这次使用一台纯净系统的服务器来装。</p></blockquote><h3 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">curl -sSL http<span class="variable">s:</span>//<span class="built_in">get</span>.docker.<span class="keyword">com</span>/ | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure><h3 id="安装-transmission"><a href="#安装-transmission" class="headerlink" title="安装 transmission"></a>安装 transmission</h3><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-<span class="ruby">-restart=always \</span></span><br><span class="line"><span class="ruby">--name transmission \</span></span><br><span class="line"><span class="ruby">-v /home/tr/<span class="symbol">torrents:</span>/to_download \</span></span><br><span class="line"><span class="ruby">-v /home/tr/<span class="symbol">download:</span>/output \</span></span><br><span class="line"><span class="ruby">-p <span class="number">9091</span><span class="symbol">:</span><span class="number">9091</span> \</span></span><br><span class="line"><span class="ruby">-p <span class="number">51413</span><span class="symbol">:</span><span class="number">51413</span> \</span></span><br><span class="line"><span class="ruby">-e USERNAME=admin \</span></span><br><span class="line"><span class="ruby">-e PASSWORD=admin \</span></span><br><span class="line"><span class="ruby">jaymoulin/transmission</span></span><br></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>输入 IP:9091 即可进入 transmission 的管理界面</p><blockquote><p>由于未知原因，现在创建好 transmission 这个容器之后，在输入用户名和密码那里，会一直被卡住，点登录之后还是让你再输入，完全无法进入……</p></blockquote><blockquote><p>这不是最重要的问题，问题是，我发现我输入账户密码后，无法进入界面。然而，我直接什么都不输入，按回车，却可以进入……<br>为了确认，我还专门有手机流量试一下，发现确实，什么都不输入就可以进入……所以看重安全的朋友还是不要用这个 transmission 容器了。</p></blockquote><p>下载后的文件是保存在 <code>/home/tr/download</code> 这个路径下的</p><p>想要取回本地，可以和上一篇文章一样，安装 caddy ，或者也可以使用 FTP 的方法。</p><h3 id="取回本地"><a href="#取回本地" class="headerlink" title="取回本地"></a>取回本地</h3><p>但是下载好后文件是在服务器里，我想把它取回到电脑或者手机。那么，开启一个 http 服务即可。这里推荐两个方案：</p><h2 id="一、h5ai"><a href="#一、h5ai" class="headerlink" title="一、h5ai"></a>一、h5ai</h2><p>一行命令即可，最简单<br><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">docker run -d -p <span class="number">8055</span>:<span class="number">80</span> -v /home/<span class="regexp">tr/download:/h5ai --name h5ai ilemonrain/h</span>5ai:full -d</span><br></pre></td></tr></table></figure></p><p>装好后在浏览器输入 <code>ip:8085</code> 就可以看到里面的内容</p><h2 id="二、caddy"><a href="#二、caddy" class="headerlink" title="二、caddy"></a>二、caddy</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget -<span class="keyword">N</span> --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/ToyoDAdoubi/doubi/master/caddy_install.<span class="keyword">sh</span> &amp;&amp; chmod +<span class="keyword">x</span> caddy_install.<span class="keyword">sh</span> &amp;&amp; bash caddy_install.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p>写入配置<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="comment">":80 &#123;  </span></span><br><span class="line"> root /home/<span class="keyword">tr</span></span><br><span class="line"> timeouts none  </span><br><span class="line"> gzip  </span><br><span class="line"> <span class="keyword">browse</span>  </span><br><span class="line">&#125;<span class="comment">" &gt; /usr/local/caddy/Caddyfile</span></span><br></pre></td></tr></table></figure></p><p>启动 caddy<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/caddy start</span></span><br></pre></td></tr></table></figure></p><p>开放服务器 80 端口<br><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">ufw allow <span class="number">80</span></span><br></pre></td></tr></table></figure></p><p>完成后就可以在浏览器里，输入 <code>IP地址</code> 来访问下载好的文件了。如果是 MP4 文件的话，还可以支持在线播放。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍如何在服务器上安装 docker，并安装 transmission 来下载 BT 种子任务。并且取回本地。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="docker" scheme="https://powersee.github.io/tags/docker/"/>
    
      <category term="BT" scheme="https://powersee.github.io/tags/BT/"/>
    
  </entry>
  
</feed>
