<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Powersee的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://powersee.github.io/"/>
  <updated>2020-09-06T10:42:50.032Z</updated>
  <id>https://powersee.github.io/</id>
  
  <author>
    <name>powersee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在 N1、我家云搭建 discuz 论坛</title>
    <link href="https://powersee.github.io/2020/09/discuz-in-N1/"/>
    <id>https://powersee.github.io/2020/09/discuz-in-N1/</id>
    <published>2020-09-06T08:44:16.000Z</published>
    <updated>2020-09-06T10:42:50.032Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>为了更好地讲解，如何为 qiandao 这个全自动签到平台，制作签到模板，我打算搭建一个 discuz 论坛来演示。本次使用的设备是 斐讯N1，因为之前把它刷成 Ubuntu 系统，再装上 乘风大佬 制作的导航（详情请看：<a href="/2020/03/n1-armbian-server">打造最具性价比服务器 N1-armbian</a>），所以现在它是一个 lnmp 环境，添加多一个网站也很容易。</p><p>当然，用 <code>我家云</code>、<code>S905电视盒子</code> 也可以，这两个我之前也介绍过怎么在上面安装 armbian 并使用 乘风大佬 制作的导航。</p><p>下面开始具体操作流程</p><h3 id="一、下载网站源码"><a href="#一、下载网站源码" class="headerlink" title="一、下载网站源码"></a>一、下载网站源码</h3><p><a href="https://gitee.com/3dming/DiscuzL/attach_files" target="_blank" rel="noopener">https://gitee.com/3dming/DiscuzL/attach_files</a></p><p>官方的源码放在 gitee 上面，下载需要有账号。为了方便其他人下载，我将最新版的下载后传到网盘中了。网盘：<a href="http://veger.ys168.com/" target="_blank" rel="noopener">http://veger.ys168.com/</a> </p><blockquote><p>在【Web相关】文件夹中</p></blockquote><h3 id="二、上传到设备内"><a href="#二、上传到设备内" class="headerlink" title="二、上传到设备内"></a>二、上传到设备内</h3><p>需要用到的是压缩包中的 upload 文件夹，你可以选择在电脑上解压，然后再传入 N1，可以用 smb 、ftp、scp 等方式传输。</p><p>也可以直接将压缩包先传到 N1 里面。然后使用 unzip 命令解压（建议先建立一个空文件夹，将压缩包放里面），之前再用 mv 命令将 upload 文件夹移动到你想要放的位置。这里顺便改一下文件夹名。</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">mv</span> upload /<span class="meta">opt</span>/wwwroot/discuz</span><br></pre></td></tr></table></figure><h3 id="三、修改-nginx-的配置文件"><a href="#三、修改-nginx-的配置文件" class="headerlink" title="三、修改 nginx 的配置文件"></a>三、修改 nginx 的配置文件</h3><p>先进入配置所在的位置</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/opt/</span>etc<span class="regexp">/nginx/</span>vhost</span><br></pre></td></tr></table></figure><p>把 h5ai 的配置文件复制一份给 discuz 用，然后手动编辑这份配置</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cp</span> h5ai.<span class="keyword">conf</span> discuz.<span class="keyword">conf</span></span><br><span class="line"><span class="keyword">vim</span> discuz.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure><p>我将它修改为这样</p><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">server</span> &#123;</span><br><span class="line">     listen <span class="number">8188</span>;</span><br><span class="line">     server_name localhost;</span><br><span class="line">     root /opt/wwwroot/discuz/;</span><br><span class="line">     <span class="keyword">index</span>  <span class="keyword">index</span>.html  <span class="keyword">index</span>.php  /_h5ai/<span class="keyword">public</span>/<span class="keyword">index</span>.php;</span><br><span class="line">     include /opt/etc/nginx/conf/php-fpm.conf;</span><br><span class="line">    <span class="meta">#otherconf</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>主要就是修改第二和第四行</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">listen</span> <span class="number">8188</span>; <span class="comment">#端口可以自己设置，但是不能和其它重复</span></span><br><span class="line"><span class="attribute">server_name</span> localhost; <span class="comment">#有域名的话是在这里设置</span></span><br><span class="line"><span class="attribute">root</span> /opt/wwwroot/discuz/; <span class="comment"># 网站源码所在的文件夹路径</span></span><br></pre></td></tr></table></figure><p>改好后，让 Nginx 重新读取一下配置</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">/opt/sbin/nginx</span> -s <span class="keyword">reload</span></span><br></pre></td></tr></table></figure><h3 id="四、安装"><a href="#四、安装" class="headerlink" title="四、安装"></a>四、安装</h3><p>然后你到浏览器打开 N1 的 IP:8188</p><p>就可以看到 discuz 的安装界面。</p><p><img src="\img\2020\discuz-install.png" alt="discuz-install"></p><p>但是你有可能会碰到提示不可写的情况</p><p><img src="\img\2020\不可写.png" alt="不可写"></p><p>这时就需要修改权限了</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">chmod</span> -R <span class="number">777</span> /<span class="meta">opt</span>/wwwroot/discuz</span><br></pre></td></tr></table></figure><p>然后再刷新一下网页应该就可以了</p><p>接着来到这一步，数据库密码改为 <code>123456</code></p><p><img src="\img\2020\discuz-database.png" alt="discuz-database"></p><p>然后就可以按下一步安装了。</p><p>这样应该就可以顺利使用了。</p><h3 id="五、卸载"><a href="#五、卸载" class="headerlink" title="五、卸载"></a>五、卸载</h3><p>删除 nginx 配置和网站源码</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">rm <span class="meta-keyword">/opt/</span>etc<span class="meta-keyword">/nginx/</span>vhost/discuz.conf</span><br><span class="line">rm -rf <span class="meta-keyword">/opt/</span>wwwroot/discuz</span><br></pre></td></tr></table></figure><p>删除数据库</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">/opt/bin/mysql -uroot -p</span><br><span class="line"># 输入密码 123456</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> ultrax;</span><br></pre></td></tr></table></figure><p>完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;为了更好地讲解，如何为 qiandao 这个全自动签到平台，制作签到模板，我打算搭建一个 discuz 论坛来演示。本次使用的设备是 斐讯N
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="网络" scheme="https://powersee.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="服务器" scheme="https://powersee.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>搭建自动签到平台——qiandao</title>
    <link href="https://powersee.github.io/2020/09/qiandao-docker/"/>
    <id>https://powersee.github.io/2020/09/qiandao-docker/</id>
    <published>2020-09-05T09:37:26.000Z</published>
    <updated>2020-09-06T01:42:17.813Z</updated>
    
    <content type="html"><![CDATA[<p>Github 项目：<a href="https://github.com/AragonSnow/qiandao" target="_blank" rel="noopener">https://github.com/AragonSnow/qiandao</a></p><p>本文主要介绍 docker 安装法</p><h3 id="一、导入镜像"><a href="#一、导入镜像" class="headerlink" title="一、导入镜像"></a>一、导入镜像</h3><p>直接拉取镜像，可以使用下面这行命令</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull asdaragon/qiandao</span><br></pre></td></tr></table></figure><p>拉取不了镜像的，可以使用我放到网盘中的镜像 <a href="http://pan-yz.chaoxing.com/share/info/b63ab64054fc6e0a" target="_blank" rel="noopener">超星网盘地址</a></p><p>百度网盘链接：<a href="https://pan.baidu.com/s/1CteLUgJQR_Rz7Sh3G4E0Pw" target="_blank" rel="noopener">https://pan.baidu.com/s/1CteLUgJQR_Rz7Sh3G4E0Pw</a><br>提取码：6666</p><p>下载后是一个 tar 结尾的文件，可以通过 portainer 将它导入机器里。如果你的机器里没有装 portainer ，就得在命令行中导入了。可以通过 smb 、ftp 、scp 等方式，将文件传入到机器里，之后，在终端中，cd 到文件所在的目录。</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">docker load -<span class="selector-tag">i</span> qiandao.tar</span><br></pre></td></tr></table></figure><p>就可以导入镜像。</p><h3 id="二、创建和启动容器"><a href="#二、创建和启动容器" class="headerlink" title="二、创建和启动容器"></a>二、创建和启动容器</h3><ol><li>在 portainer 中创建容器</li></ol><p><img src="\img\2020\创建容器.png" alt="创建容器"></p><ol start="2"><li>在群晖中创建容器</li></ol><p>打开【docker】图标，【映像】，选择 qiandao ，【启动】，【高级设置】</p><p><img src="\img\2020\群晖创建qiandao容器.png" alt="群晖创建qiandao容器">设置一下端口就行，之后 【下一步】，【应用】。</p><h3 id="三、使用服务器创建容器"><a href="#三、使用服务器创建容器" class="headerlink" title="三、使用服务器创建容器"></a>三、使用服务器创建容器</h3><blockquote><p>要想进行下面的操作，需要有一个服务器，如果你没有的话， <a href="https://www.vultr.com/?ref=8161953-4F" target="_blank" rel="noopener">点此链接注册充值 10 美元送 50 美元</a><br>送的 50美元只有一个月的有效期。（所以不要省，开贵点的机器吧）</p></blockquote><blockquote><p>使用这家的服务器，是因为它可以随时的删除，不像其它的，一买就得一年。而且，这家还可以选择自动安装 docker ，又节省了一些时间。</p></blockquote><ol><li>点击左边的 billing</li><li>充值方式支持 <strong>支付宝</strong> <strong>微信</strong>（但最少 10 美元）</li><li>充值好后 ，点右边那个 <strong>+</strong> 的圆圈</li><li>然后选择服务器的<strong>地区</strong>（日本和新加坡会比较快，不过有可能连接不上，选美国也可以。韩国好像是最近才有的，可以试试。）</li><li><strong>Server Type</strong>点 <strong>application</strong> ，里面就有 <strong>docker</strong></li><li><strong>Server Size</strong> 就是服务器的配置，越高就越贵。（如果有赠送的 50 美元，那就选那个 40 美元的吧，反正你不花，下个月也没了）</li><li>把下面的 <strong>Enable IPv6</strong> 前面的 框 打钩✅（可以使我们下载时连接到更多的用户）</li><li>然后点击右下角的 deploy now<ol start="9"><li>等待几分钟……</li><li>就可以看到服务器部署好了，给了一个 ip 地址。</li></ol></li></ol><p>等待服务器装好系统，然后可以用 xshell 之类的工具，连接服务器。主要用到服务器的 ip ，用户名，密码。</p><p>连接服务器后，我们便可以在终端中拉取镜像</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull asdaragon/qiandao</span><br></pre></td></tr></table></figure><p>建立容器</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -d <span class="comment">--name qiandao -p 9527:80 asdaragon/qiandao</span></span><br></pre></td></tr></table></figure><p>此时用的端口是 9527，然后在浏览器中输入 ip:9527，例如 <code>132.123.22.33:9527</code> 这样的格式，就可以访问签到平台。</p><p>使用服务器的好处是，你订阅公共模板应该不会出现什么问题。而已，你可以将你搭建的签到网站，分享给你的朋友，这样这个平台就可以多人使用。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>最简单的使用方法是用别人写好的模板，然后根据要求，看是要 cookie ，还是要账号密码，根据要求给对应的内容即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Github 项目：&lt;a href=&quot;https://github.com/AragonSnow/qiandao&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/AragonSnow/qiandao&lt;/a&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
      <category term="docker" scheme="https://powersee.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>对于掌阅精选的一些研究</title>
    <link href="https://powersee.github.io/2020/08/about-zyjx/"/>
    <id>https://powersee.github.io/2020/08/about-zyjx/</id>
    <published>2020-08-05T14:33:23.000Z</published>
    <updated>2020-08-10T13:29:30.646Z</updated>
    
    <content type="html"><![CDATA[<p>由于我购买了两台掌阅F1手机，来参加阅读 180 天，购买金额全返回的活动。所以最近也就接触了 掌阅精选 这款app，使用了也有一段时间了，也算有了一些了解。</p><p>首先，它的账号和掌阅的账号是不通用的，不过如果你之前的手机号注册过掌阅，现在注册掌阅精选，系统监测到你是掌阅老用户，会赠送一些虚拟币给你购买书籍。像我的话是赠送了 50 个，相当于人民币 50 块。加上新用户福利，有 10 个币，一共就 60 个了。我用它买了好几本书。</p><p>新用户刚注册的前七天，每天登录可以领取虚拟币，七天一共能领 10 个。而且新人还有购书优惠，第一本书不用钱，所以很多人都去挑选那些很贵的书，卖三四百的那种。像我就有买《世界名著合集》、《银河帝国》。然后第二本书还是有优惠，只需要一分钱，所以感觉掌阅精选为了拉取新用户，下的力度还是挺大的。</p><p>我之前以为掌阅精选也可以每天签到，靠签到得到的赠送币来购买书，这样不就可以一直不花钱来看书了吗？不过。。。只有新人的前七天才有，七天后就只剩下一种方式来获取赠送币了– <strong>阅读时长</strong>。每个星期，星期一开始、星期日结束，只要你阅读30分钟，就可以兑换一个赠送币，<strong>每周最多10个</strong>，也就是阅读5个小时。</p><p>而兑换来的赠送币的有效期是<strong>一个月</strong>，我8月2日兑换了10个，从【账户】里面查到有效期是到 9 月 1 日。所以这样算，一个月最多可以积累50个，购买那些非合集的书一般是够的。</p><blockquote><p>掌阅精选领取赠送币之后，分享到微信，让账号和小程序绑定，赠送币还能翻倍。本来这星期阅读满5个小时，领取了十个赠送币，分享之后，又领取了10个。经过测试，第二个星期继续分享，还能再领另外10个。这也就意味着，每个星期可以领取20个赠送币，单靠这些，账号里一个月可以积累100个赠送币。</p></blockquote><p>刚才我把 app 升级了一下，现在也有了每天签到的入口了，不过签到得的币很少，连续七天下来也就2.8个。</p><p>有一点我是觉得挺有意思的，掌阅精选里面的书，购买的时候如果不用赠送币，而用真金白银购买，是支持七天内退款的。这就简直不知怎么夸好了，对于大部分书，我相信自己还是能够在七天内看完的， 而且之后打卡活动开始之后，每天都得阅读 30 分钟，七天就是 3 个半小时，或许看一些字数比较多的书，看不完，但是我想，是否能够利用这个规定，我在第六天就退款，然后再买呢？感觉掌阅这样搞很容易被薅羊毛嘛。</p><p>不过我觉得还是不要轻易去尝试比较好，谁知道它会不会也像京东那样，搞一个黑号系统，退款多几次就把你拉进黑号名单。</p><p>也有可能只是因为掌阅精选现在需要拉人头，所以才有这么大的优惠和福利，就像几年前，掌阅那时通过每天的签到，也可以购买很多书的，后来不也不行了。签到给的阅饼变少了，阅饼的使用期限也缩短了，就导致【不花钱也能一直看书】这种现象减少了。</p><p>不过也有可能优惠会一直持续下去吧，毕竟现在竞争这么激烈，想想今年搞【阅读打卡】的，有 京东阅读、咪咕阅读、QQ阅读、国文和当当合作的阅读器、以及本文讲的掌阅，这些都是国内的阅读平台，而用户一共就那么多。你不搞优惠的话，用户可能就被其它平台抢去了。</p><p>刚才去查了一下，阅读时长兑换书币这种活动，谁是最先发明的不知道，但是搞得最火热的应该是微信读书。现在好像是变成时长兑换无限卡了吧，所以感觉这种模式是有可能一直持续下去的。</p><p>而且我还了解到其它两个平台，网易蜗牛和藏书馆。前者每天的第一个小时可以免费阅读，后者的书是通过借阅的，和图书馆一样，书被别人借了，你就没法读，挺有意思的。</p><hr><p>不过这些我都没有多大的兴趣的去注册，我购买了两台掌阅 F1 ，每台需要打卡 180 天，每天半个小时，我接下来将会花费很多时间，在掌阅精选这个 app 上面。所以利用好时长兑换赠书币这个活动，一般也就够用了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于我购买了两台掌阅F1手机，来参加阅读 180 天，购买金额全返回的活动。所以最近也就接触了 掌阅精选 这款app，使用了也有一段时间了，也算有了一些了解。&lt;/p&gt;
&lt;p&gt;首先，它的账号和掌阅的账号是不通用的，不过如果你之前的手机号注册过掌阅，现在注册掌阅精选，系统监测到
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="阅读" scheme="https://powersee.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>关于 s905 盒子数码Q5刷 armbian Ubuntu</title>
    <link href="https://powersee.github.io/2020/07/about-s905/"/>
    <id>https://powersee.github.io/2020/07/about-s905/</id>
    <published>2020-07-07T13:22:48.000Z</published>
    <updated>2020-07-09T00:31:44.096Z</updated>
    
    <content type="html"><![CDATA[<p>闲鱼上面 s905 的电视盒子有很多，我买的是 北京数码视讯 Q5 ，这款算是比较出名的了，网上搜也可以找到很多帖子。</p><p>我买来时里面就是破解好的安卓系统了，当成一个普通播放器是没什么问题的。如果你是家里本身就有这台设备的，可以网上查一下怎么破解，其实不能算破解吧，应该叫刷机才对。</p><p>比如我这台后面写的是江苏移动，那它应该是江苏那边的用户办理宽带送的，然后如果宽带到期了，这台设备也就没法用了。因为里面的系统是移动定制的。网上有方案可以把它刷成其它系统，做到废物利用。</p><p>虽然我现在可以正常使用里面的安卓系统，不过我好奇的是怎么把它刷成 Linux 系统。研究之后发现挺简单的。</p><hr><p><strong>需要东西</strong>（在网盘 <a href="http://veger.ys168.com/" target="_blank" rel="noopener">http://veger.ys168.com/</a> 的【不仅限于盒子】文件夹中）</p><ol><li>Linux 系统镜像（这里使用 Ubuntu 18.04）</li><li>将 img 镜像写入 U 盘或者 tf 卡的工具——usb burning tool</li><li>从安卓系统重启到 Linux 系统软件—— Reboot to libreELEC</li></ol><p>将三样东西准备好，然后用 usb burning tool 将 img 镜像写入 U 盘或者 tf 卡。写入好后，需要修改 dtb ，我们更改  U 盘或者 tf 卡的 <code>uEnv.ini</code> 文件，将里面的第一行修改为</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">dtb_name</span>=/dtb/meson-gxbb-p201.dtb</span><br></pre></td></tr></table></figure><p>保存文件，将 U 盘或者 tf 卡插入机器，开机。</p><p>如果依然是进入到安卓系统的话，那就安装一个上面提到的 <code>Reboot to libreELEC</code> 这个软件，自己想办法把这个 apk 安装包弄到盒子上面装。</p><p>装好打开这个软件，确认，就可以重启进入 Linux 系统。后面的教程和之前的 N1 教程一模一样的，可以去看之前的文章就行。</p><p><a href="/2020/03/n1-armbian-server/">打造最具性价比服务器 N1-armbian</a></p><p>有一个缺点就是，没法驱动 wifi ，我试过里面好几个 dtb ，都没法，尝试用其它版本的固件，也不行，暂时无解，如果有朋友知道怎么解决欢迎告知我一下，可以用下方的邮箱，或者其它平台的私信、留言都可以，感谢。</p><p>视频发出后，感谢网友 @<a href="https://space.bilibili.com/53153092" target="_blank" rel="noopener">栾__</a> 的回复</p><blockquote><p>wifi可以用544的镜像，后来的都没有驱动</p></blockquote><p>于是我通过搜索找到了这篇帖子</p><p><a href="S905/S905X Armbian安装WiFi驱动8189ETV的解决方法">S905/S905X Armbian安装WiFi驱动8189ETV的解决方法</a></p><p>在里面下载了 5.44 的镜像，将 dtb 文件夹里面的 meson-gxbb-p201.dtb 复制到根目录，改名为 dtb.img。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;闲鱼上面 s905 的电视盒子有很多，我买的是 北京数码视讯 Q5 ，这款算是比较出名的了，网上搜也可以找到很多帖子。&lt;/p&gt;
&lt;p&gt;我买来时里面就是破解好的安卓系统了，当成一个普通播放器是没什么问题的。如果你是家里本身就有这台设备的，可以网上查一下怎么破解，其实不能算破解
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>蜗牛星际驱动核显，使用 jellyfin 和 qbittorrent</title>
    <link href="https://powersee.github.io/2020/06/xingjiwoniu/"/>
    <id>https://powersee.github.io/2020/06/xingjiwoniu/</id>
    <published>2020-06-29T02:14:09.000Z</published>
    <updated>2020-06-29T14:01:57.593Z</updated>
    
    <content type="html"><![CDATA[<p>最近入手了一台蜗牛星际，这里记录一些自己踩过的坑。</p><h2 id="驱动核显"><a href="#驱动核显" class="headerlink" title="驱动核显"></a>驱动核显</h2><h3 id="如何替换-lzma-文件"><a href="#如何替换-lzma-文件" class="headerlink" title="如何替换 lzma 文件"></a>如何替换 lzma 文件</h3><p>需要用到 pe ，这里我用的是 wepe</p><p>将pe系统写入U盘，插入蜗牛的usb口，连接键盘鼠标，开机一直按 del 键，进入bios，在最右边选择U盘，进入 pe。</p><p>之后打开桌面的 DG ，选中引导所在的硬盘或者U盘（我的话是将引导放在16G的 msata 硬盘里的）。选择分区1，点右边的浏览文件，可以看到里面有两个文件 <code>extra.lzma</code> 和 <code>extra2.lzma</code> </p><p><img src="\img\2020\驱动核显需要替换的文件.jpg" alt="驱动核显需要替换的文件"></p><p>将这两个文件替换为网盘中的那两个即可。</p><p>网盘：<a href="http://veger.ys168.com/" target="_blank" rel="noopener">http://veger.ys168.com/</a></p><p>可以右键然后选择【复制文件到当前分区】。</p><p>然后关机，拔掉 pe U盘，再次进入群晖系统，应该就能驱动核显了。</p><h3 id="如何判断已经驱动核显了？"><a href="#如何判断已经驱动核显了？" class="headerlink" title="如何判断已经驱动核显了？"></a>如何判断已经驱动核显了？</h3><p>用 ssh 连接群晖，输入</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span> <span class="string">/dev/dri/</span></span><br></pre></td></tr></table></figure><p>如果能够看到 renderD128 就是驱动了。</p><h2 id="搭建媒体仓库——-jellyfin"><a href="#搭建媒体仓库——-jellyfin" class="headerlink" title="搭建媒体仓库—— jellyfin"></a>搭建媒体仓库—— jellyfin</h2><p>相比于 plex 和 emby ，jellyfin 的优势是调用硬件转码不用钱。</p><p>这里我是使用 docker 来安装的，容器建立时需要有这个命令，才能调用核显</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--device=/dev/dri/renderD128</span><br></pre></td></tr></table></figure><h2 id="BT下载器——qbittorent"><a href="#BT下载器——qbittorent" class="headerlink" title="BT下载器——qbittorent"></a>BT下载器——qbittorent</h2><p>用手动安装的 qb ，没法正常在 chrome 浏览器打开，只能在隐身模式下才能打开。所以我采用 docker   的方式来安装。</p><p>一开始老是没法设置好 /config 映射到宿主机的文件夹的权限，导致 qb 的 web 界面打开后残缺，而且也没法登录。明明我已经把映射的文件夹权限设置为 everyone 了，还是不行。。。</p><p>最后发现最简单的应该是不管 /config 了，只设置 /downloads 的映射就行。就可以正常使用 qb 。</p><p>但是，我不喜欢这样的方式，我还是喜欢把 /config 映射到宿主机的文件夹中。所以我采用命令行的方式来建立 docker 容器。</p><p>需要先确认文件夹的权限，也可以</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod -R 777 /xxx</span><br></pre></td></tr></table></figure><p>来更改文件夹 xxx 的权限。</p><p>如果想要 qb 能连接 ipv6 用户的话，得使用 </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--network host</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近入手了一台蜗牛星际，这里记录一些自己踩过的坑。&lt;/p&gt;
&lt;h2 id=&quot;驱动核显&quot;&gt;&lt;a href=&quot;#驱动核显&quot; class=&quot;headerlink&quot; title=&quot;驱动核显&quot;&gt;&lt;/a&gt;驱动核显&lt;/h2&gt;&lt;h3 id=&quot;如何替换-lzma-文件&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
      <category term="nas" scheme="https://powersee.github.io/tags/nas/"/>
    
  </entry>
  
  <entry>
    <title>关于咪咕 kindle 打卡版</title>
    <link href="https://powersee.github.io/2020/06/migu-kindle/"/>
    <id>https://powersee.github.io/2020/06/migu-kindle/</id>
    <published>2020-06-15T13:49:06.000Z</published>
    <updated>2020-06-28T06:06:34.785Z</updated>
    
    <content type="html"><![CDATA[<p>终究还是按捺不住想薅羊毛的欲望，上了白嫖咪咕版 kindle 的车。虽然跟之前的 海信A5、腾讯口袋阅相比，咪咕的要求低了很多，只需要每天阅读 15 分钟，连续 100 天即可。</p><p>但是，翻车的几率还是挺大的。为了提高成功率，我做了一些研究。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>首先我在网上收集了一些图片。</p><p><img src="\img\2020\小丸子打卡图.jpg" alt="小丸子打卡图"></p><p><img src="\img\2020\红色打卡图-1592296231569.jpg" alt="红色打卡图"></p><p>来两张适合全面屏的</p><p><img src="\img\2020\白嫖打开图-1592296454315.png" alt="白嫖打开图"></p><p><img src="\img\2020\记得打卡.jpg" alt="记得打卡"></p><h3 id="1、锁屏壁纸"><a href="#1、锁屏壁纸" class="headerlink" title="1、锁屏壁纸"></a>1、锁屏壁纸</h3><p>将这些打卡图片设置为锁屏壁纸，这样每次打开手机就能看到。</p><h3 id="2、微信聊天背景图"><a href="#2、微信聊天背景图" class="headerlink" title="2、微信聊天背景图"></a>2、微信聊天背景图</h3><p>还可以设置为微信常聊对象的背景图。</p><h3 id="3、打卡群"><a href="#3、打卡群" class="headerlink" title="3、打卡群"></a>3、打卡群</h3><p>打卡群非常重要，个人认为，建立一个 5-8 个人的微信群，每天打卡完成就到群里报道，如果发现有人晚上 8 点还没打卡，就可以 @ ta 提醒一下。</p><h3 id="4、公众号设置提醒"><a href="#4、公众号设置提醒" class="headerlink" title="4、公众号设置提醒"></a>4、公众号设置提醒</h3><p>公众号 【微定时】可以设置每天定时提醒，我将其置顶，如果当天没有打卡，那个小红点就一直在那里。</p><h3 id="5、每天邮件提醒"><a href="#5、每天邮件提醒" class="headerlink" title="5、每天邮件提醒"></a>5、每天邮件提醒</h3><p>可以利用一个 python 脚本，每天发 Email 给自己，起到提醒作用。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yagmail</span><br><span class="line"></span><br><span class="line">yag = yagmail.SMTP(user=<span class="string">'xxx@163.com'</span>,host=<span class="string">'smtp.163.com'</span>)</span><br><span class="line"></span><br><span class="line">contents = [<span class="string">'记得打卡啊，想想你的 468 '</span>]</span><br><span class="line"></span><br><span class="line">yag.send(<span class="string">'xxxxxx@qq.com'</span>,<span class="string">'签到提醒'</span>,contents)</span><br></pre></td></tr></table></figure><h3 id="6、使用-autojs-脚本自动翻页"><a href="#6、使用-autojs-脚本自动翻页" class="headerlink" title="6、使用 autojs 脚本自动翻页"></a>6、使用 autojs 脚本自动翻页</h3><p>用这个感觉还是有可能被软件检测到，虽然现在手机升级到 miui12 了，可以禁止 咪咕阅读 读取手机里的应用列表，不过感觉还是有危险，最好还是不用为好。</p><h2 id="其它信息"><a href="#其它信息" class="headerlink" title="其它信息"></a>其它信息</h2><h3 id="断网能否统计阅读时间"><a href="#断网能否统计阅读时间" class="headerlink" title="断网能否统计阅读时间"></a>断网能否统计阅读时间</h3><p>刚才测试了一下，在开着飞行模式的状态下看书，能否统计阅读时间？看了十几分钟后，关闭飞行模式，联网。发现时间没有统计。。。然后继续阅读十分钟，再来看统计时间，发现阅读时间变30分钟了。 那看来，断网时也是有统计的，不过显示出来需要一段时间后。所以最好还是保持联网吧。 </p><h3 id="电量"><a href="#电量" class="headerlink" title="电量"></a>电量</h3><p>我这台感觉电量还行吧，一天阅读30分钟，十天下来，电量剩 8%，这还是在联网的状态，如果断网应该还能用更久。</p><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>咪咕应该是用安卓系统，用数据线连接电脑的话，显示的是这样的</p><p><img src="\img\2020\咪咕连接电脑.png" alt="咪咕连接电脑"></p><p>而用普通版 kindle 连接电脑，则显示的是像 U盘那样的。</p><h3 id="支持什么格式的书？"><a href="#支持什么格式的书？" class="headerlink" title="支持什么格式的书？"></a>支持什么格式的书？</h3><p>打开咪咕的 WLAN 传书，可以看到</p><blockquote><p>支持文件格式：</p><p>TXT、EPUB、UMD</p></blockquote><p>所以传入 mobi 格式的书籍是没法用咪咕系统打开的。</p><hr><p>希望可以顺利打完卡下车吧，用了一段时间，感觉咪咕的书还行吧，这些天都能找到感兴趣的来看。现在是6月28日，过几天就能正式打卡了，估计很快就能在闲鱼搜到打卡失败的 kindle 低价抛售了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;终究还是按捺不住想薅羊毛的欲望，上了白嫖咪咕版 kindle 的车。虽然跟之前的 海信A5、腾讯口袋阅相比，咪咕的要求低了很多，只需要每天阅读 15 分钟，连续 100 天即可。&lt;/p&gt;
&lt;p&gt;但是，翻车的几率还是挺大的。为了提高成功率，我做了一些研究。&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>关于斐讯 R1 智能音响</title>
    <link href="https://powersee.github.io/2020/05/about-R1/"/>
    <id>https://powersee.github.io/2020/05/about-R1/</id>
    <published>2020-05-04T01:24:19.000Z</published>
    <updated>2020-05-08T07:17:55.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这款产品是 燕飞利仕 和斐讯合作的产品，应该是2018年推出的。</p><p>这是一款智能音响，可以搭配【斐讯ai】这个 app 来使用，不过，由于斐讯后来翻车了，至今也快两年了。所谓智能音响，也就是可以用语音来控制罢了。但是由于斐讯服务器那边不能用（或者说不稳定）。账号现在没法正常注册，看论坛有人说每天 0 点会开放注册一段时间，由于本人 2017 年时就有了斐讯的账号，也没去尝试能否注册。</p><p>所以很多人就只能把这音响当普通音响来用，音响开机后按三下顶部的按键，就可以打开蓝牙，之后用手机或者电脑连接，听歌或者听有声小说还是不错的。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>不过最近我在拼多多买了这台设备，发现斐讯的服务器还是可以连接的嘛，而且网上有大佬修改了 app ，使得现在没有账号的情况下，也能配置音响的网络，使其连接家中的WIFI。修改版APP下载：<a href="http://veger.ys168.com/" target="_blank" rel="noopener">http://veger.ys168.com/</a></p><p>但是有些时候，配置网络好了，喊【小讯小讯】，却会提示，未绑定。。。</p><h2 id="这时候有两种解决方案"><a href="#这时候有两种解决方案" class="headerlink" title="这时候有两种解决方案"></a>这时候有两种解决方案</h2><p>一，修改路由器的 dns</p><p>将路由器的 DNS 改为 47.240.76.176</p><p><img src="/img/2020/padavan-dns.jpg" alt="padavan-dns"></p><p>二，自定义 hosts</p><p>在路由器的 hosts 中添加 118.24.249.189  aios-home.hivoice.cn</p><p>在老毛子路由器中</p><p><img src="/img/2020/padavan-hosts.jpg" alt="padavan-hosts"></p><p>在 openwrt 路由器中</p><p><img src="/img/2020/openwrt-hosts.jpg" alt="openwrt-hosts"></p><p>这样做音响才能完成绑定，之后我们就可以使用语音来控制它了。</p><blockquote><p>如果你用的是普通的路由器，那看看哪个地方可以修改 hosts，实在找不到就修改 DNS 吧。  </p></blockquote><hr><p><strong>如果你实在太小白，不会修改 dns 和 hosts ，那就放弃语音控制吧，反正作用也不是那么大。还有很多其它的东西可以折腾的。</strong></p><h2 id="使用-dlna-享受更好的音质"><a href="#使用-dlna-享受更好的音质" class="headerlink" title="使用 dlna 享受更好的音质"></a>使用 dlna 享受更好的音质</h2><p>前段时间，在网上看到这样的话</p><blockquote><p>蓝牙连接是sbc，音效很浑浊，发闷。dlan 才能发挥它真正的音质</p></blockquote><p>为了用上 dlna ，我在论坛中找到在 R1 上面安装 dlna 的方法，同样将资源放在网盘中了：<a href="http://veger.ys168.com/" target="_blank" rel="noopener">http://veger.ys168.com/</a></p><p>装好后，在电脑中就可以选中歌曲，然后将其推送到 R1 上面播放了。</p><p><img src="/img/2020/dlna1.jpg" alt="dlna1"></p><p>后来，有网友提示，其它系统也自带有 dlna 的，不过需要蓝牙打开的状态下才可以用。所以我打开蓝牙后，再来右键歌曲，就可以看到有两个 dlna 了。</p><p><img src="/img/2020/dlna2.jpg" alt="dlna2"></p><p>据说还可以装一个【乐播投屏】也同样有 dlna ，论坛有个帖子分析了各自的优缺点。<a href="https://www.right.com.cn/forum/thread-4017780-1-1.html" target="_blank" rel="noopener">R1音响三大dlna软件对比</a> 不过这个我自己没用，我最多使用的还是 从n1提取的dlna ，因为这个一直保持开启状态，用起来比较方便。</p><h2 id="电脑端-dlna"><a href="#电脑端-dlna" class="headerlink" title="电脑端 dlna"></a>电脑端 dlna</h2><p>用系统自带的播放器固然方便，但是不怎么好用，只能自己把歌曲添加进去，而且还不支持播放 FLAC 的歌曲。</p><p>我想要播放网易云音乐里的歌曲，有没有什么好方法呢？</p><p>那最简单的还是属用蓝牙连接。不过我这里讨论的是 dlna ，那就得用一个第三方软件了，名字是 airfoil ，这是一款付费软件，大家自己网上找吧。在电脑上安装好后，打开时就会搜索你的网络中有哪些 dlna 设备。</p><p><img src="/img/2020/Airfoil.jpg" alt="Airfoil"></p><p>下方可以选择那个设备作为音响，点亮其右侧的图标即可。上方可以选择声音来源，可以像上图那样，将整个系统的声音都输出。也可以像下图这样，只选择将网易云音乐的声音输出。</p><p><img src="/img/2020/Airfoil-netease.jpg" alt="Airfoil-netease"></p><p><strong>注意</strong> 通过 dlna 将声音输出到音响，大概有两秒的延迟，所以……只适合用来听歌，看视频和打游戏是完全没法用的。</p><h2 id="手机端-dlna"><a href="#手机端-dlna" class="headerlink" title="手机端 dlna"></a>手机端 dlna</h2><p>手机这边我一开始只知道小米系统自带的音乐播放器，可以通过 dlna 推送到 R1。不过它有很多缺陷，一次只能播放一首歌，然后就暂停了。而且没法显示播放进度。</p><p>然后我想去找其它支持 dlna 播放的 APP ，谷歌商店试了好几个，没好用的。</p><p>今天下载了个 咪咕音乐 ，想来听听周杰伦的歌，发现它居然可以把歌曲通过 dlna 推送到 R1 上面，而且切歌之后，播放进度就会同步。非常的意外，不过，它也有缺点，就是有时候没法调节 R1 的音量，有时候却可以……</p><p>后来，我发现，在网易云音乐的设置中，将 dlna 功能打开，也可以把歌曲通过 dlna 推送到 R1 上面。这个应该是现在手机端比较好用的了，可以连续播放，可以同步播放进度，还可以通过手机调节 R1 的音量。</p><h2 id="天线"><a href="#天线" class="headerlink" title="天线"></a>天线</h2><p>由于拆机时不小心，把天线弄断了。</p><p><img src="/img/2020/天线断.jpg" alt="天线断"></p><p>导致音响只有放在路由器旁边才能连接到 WiFi ，蓝牙连接距离只有一米左右……于是到淘宝买了条天线，1块4包邮，买来连接上，满血复活。</p><p><img src="/img/2020/tb天线.jpg" alt="tb天线"></p><p>由于不知道到底要买哪一款，我就买了几个，最终发现这个【IPEX 1代】在 R1 上用就刚好适合。</p><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p><a href="https://www.right.com.cn/forum/thread-4013529-1-1.html" target="_blank" rel="noopener">R1音箱 小白入门 和目前现状</a></p><p>这篇文章作者用自己的服务器提供绑定服务。</p><p><a href="https://www.cnblogs.com/lome/p/12465328.html#4548078" target="_blank" rel="noopener">https://www.cnblogs.com/lome/p/12465328.html#4548078</a></p><p>这篇教自建服务</p><p><a href="http://www.mz6.net/news/android/12911.html" target="_blank" rel="noopener">http://www.mz6.net/news/android/12911.html</a></p><p>另外一个自建服务的帖子</p><p><a href="https://www.right.com.cn/forum/thread-3285422-1-1.html" target="_blank" rel="noopener">https://www.right.com.cn/forum/thread-3285422-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这款产品是 燕飞利仕 和斐讯合作的产品，应该是2018年推出的。&lt;/p&gt;
&lt;p&gt;这是一款智能音响，可以搭配【斐讯ai】这个 app 来使用，
      
    
    </summary>
    
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>关于 docker 一些事</title>
    <link href="https://powersee.github.io/2020/04/about-docker/"/>
    <id>https://powersee.github.io/2020/04/about-docker/</id>
    <published>2020-04-26T00:17:59.000Z</published>
    <updated>2020-05-01T15:12:40.095Z</updated>
    
    <content type="html"><![CDATA[<p>有些小伙伴反映 armbian 的 docker，按照小钢炮那篇文章的方法，有一些容器老是无法启动成功。在此开一篇帖子记录一下。当然帖子的内容肯定不仅限于 armbian 。</p><h2 id="docker-镜像"><a href="#docker-镜像" class="headerlink" title="docker 镜像"></a>docker 镜像</h2><p>最近公用镜像又抽风了，没事多准备几个吧。</p><p>七牛提供的 <a href="https://reg-mirror.qiniu.com/" target="_blank" rel="noopener">https://reg-mirror.qiniu.com</a></p><p>阿里云私有镜像加速。<br>（自己进入<br><a href="https://cr.console.aliyun.com/cn-shenzhen/instances/mirrors" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-shenzhen/instances/mirrors</a> 用自己的账号登陆，获取属于自己的加速镜像）</p><p>得到的格式是这样的：<a href="https://xxxxxxxx.mirror.aliyuncs.com/" target="_blank" rel="noopener">https://xxxxxxxx.mirror.aliyuncs.com/</a></p><h2 id="关于-qb"><a href="#关于-qb" class="headerlink" title="关于 qb"></a>关于 qb</h2><p>armbian 用小钢炮的配置来建立 qb 容器的话，有一堆的问题，这里我改了一些内容，自己试了几次，应该没什么大问题了。使用的是 4.2.1，想用新的可以去 dockerhub 看→<a href="https://hub.docker.com/r/80x86/qbittorrent/tags" target="_blank" rel="noopener">传送门</a></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">IMAGE_NAME</span>=80x86/qbittorrent:4.2.1-arm64</span><br><span class="line"><span class="comment">#下面我是将 /media/one 作为下载路径，你自己修改</span></span><br><span class="line"><span class="attribute">DOWNLOAD_PATH</span>=/media/one/</span><br><span class="line"><span class="attribute">QBT_AUTH_SERVER_ADDR</span>=<span class="string">"127.0.0.1"</span></span><br><span class="line"><span class="comment">#下面我是将 /media/one/lib/qb 作为配置文件的路径，你自己修改</span></span><br><span class="line"><span class="attribute">QBCONF</span>=/media/one/lib/qb</span><br><span class="line">docker <span class="builtin-name">run</span> -d --name qbittorrent \</span><br><span class="line">        -e <span class="attribute">WEB_PORT</span>=8080 \</span><br><span class="line">        -e <span class="attribute">BT_PORT</span>=8998 \</span><br><span class="line">        -e <span class="attribute">QBT_AUTH_SERVER_ADDR</span>=<span class="variable">$QBT_AUTH_SERVER_ADDR</span> \</span><br><span class="line">        --restart unless-stopped \</span><br><span class="line">        --network host \</span><br><span class="line">        -v <span class="variable">$QBCONF</span>/.config/qBittorrent:<span class="built_in">/config </span>\</span><br><span class="line">        -v <span class="variable">$QBCONF</span>/.local/share/data/qBittorrent:/data \</span><br><span class="line">        -v <span class="string">"<span class="variable">$DOWNLOAD_PATH</span>"</span>:/downloads \</span><br><span class="line">        -v <span class="string">"<span class="variable">$DOWNLOAD_PATH</span>"</span>:<span class="string">"<span class="variable">$DOWNLOAD_PATH</span>"</span> \</span><br><span class="line">        --mount <span class="attribute">type</span>=tmpfs,destination=/tmp \</span><br><span class="line">        <span class="variable">$&#123;IMAGE_NAME&#125;</span></span><br></pre></td></tr></table></figure><p>将上面这堆在终端中输入后，到 portainer 中查看日志。</p><p><img src="/img/2020/container.jpg" alt="container"></p><p>如果启动成功，最后会出现一个地址，如果不成功，也可以看看具体出现什么问题。</p><p><img src="/img/2020/qb启动成功.jpg" alt="qb启动成功"></p><p>比较常见的问题是，docker 对文件夹没有读写权限。简单粗暴解决方案，给予 777 权限。先在 portainer 中停止 qb 容器，然后在终端执行下面的命令。</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">chmod</span> <span class="number">777</span> -R $QBCONF</span><br><span class="line"><span class="keyword">chmod</span> <span class="number">777</span> -R $DOWNLOAD_PATH</span><br></pre></td></tr></table></figure><p>然后再去启动容器。按理应该就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有些小伙伴反映 armbian 的 docker，按照小钢炮那篇文章的方法，有一些容器老是无法启动成功。在此开一篇帖子记录一下。当然帖子的内容肯定不仅限于 armbian 。&lt;/p&gt;
&lt;h2 id=&quot;docker-镜像&quot;&gt;&lt;a href=&quot;#docker-镜像&quot; class
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="docker" scheme="https://powersee.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>最强 shell 非 zsh 莫属</title>
    <link href="https://powersee.github.io/2020/03/zsh-note/"/>
    <id>https://powersee.github.io/2020/03/zsh-note/</id>
    <published>2020-03-31T09:51:20.000Z</published>
    <updated>2020-05-18T08:07:59.743Z</updated>
    
    <content type="html"><![CDATA[<p>个人比较喜欢 zsh ，特别是自动补全的插件 zsh-autosuggestions ，感觉用了就回不去了。再也无法忍受用以前那些 shell 的各种不便。因此我尽量在常用的设备上安装 zsh ，比如电脑，虚拟机，家里的一堆矿渣设备，国内外的云服务器上。</p><p>由于每次的操作都基本一样，所以我之前都是将步骤写在笔记中，用到时就复制粘贴即可。现在将内容整理到博客中，方便有时没法打开笔记，可以通过访问博客来查看。</p><p>不同的发行版有不同的包管理工具，安装过程却都差不多，apt install zsh 像这样直接安装即可。</p><hr><p>下载 oh my zsh</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</span><br></pre></td></tr></table></figure><p>可恶的墙，哎，下载不了的使用这个吧</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://gitee.com/powersee/ohmyzsh/raw/master/tools/install.sh)"</span><br></pre></td></tr></table></figure><p>下载 zsh-autosuggestions 这个插件</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone git:<span class="regexp">//gi</span>thub.com<span class="regexp">/zsh-users/</span>zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span><span class="regexp">/plugins/</span>zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>不行的话用这行</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>tee.com<span class="regexp">/powersee/</span>zsh-autosuggestions.git <span class="variable">$ZSH_CUSTOM</span><span class="regexp">/plugins/</span>zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>编辑 .zshrc 启用插件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>将 zsh-autosuggestions 添加到插件里，加在 git 后面即可，可以用空格，也可以换行。</p><p>然后由于有时连接的设备太多，不太容易分清楚哪一台，所以我喜欢用 <code>ys</code> 这个主题。一般修改第 11 行。</p><p>然后对于常用命令，可以用 alias 来自定义，比如找个空白处，写上</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> d=<span class="string">"docker"</span></span><br></pre></td></tr></table></figure><p>然后重新读取一下配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>此时输入 <code>d info</code> 就等于 输入 <code>docker info</code></p><p>如果后期配置文件搞得乱七八糟，或者误删了，可以使用这个来恢复成默认</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;个人比较喜欢 zsh ，特别是自动补全的插件 zsh-autosuggestions ，感觉用了就回不去了。再也无法忍受用以前那些 shell 的各种不便。因此我尽量在常用的设备上安装 zsh ，比如电脑，虚拟机，家里的一堆矿渣设备，国内外的云服务器上。&lt;/p&gt;
&lt;p&gt;由于
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>打造最具性价比服务器 N1-armbian</title>
    <link href="https://powersee.github.io/2020/03/n1-armbian-server/"/>
    <id>https://powersee.github.io/2020/03/n1-armbian-server/</id>
    <published>2020-03-30T08:35:45.000Z</published>
    <updated>2020-07-02T13:11:22.095Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>建议搭配视频观看：<a href="https://youtu.be/_3LqxpzISqE" target="_blank" rel="noopener">Youtube</a>    <a href="https://www.bilibili.com/video/BV13z411b7qY/" target="_blank" rel="noopener">bilibili</a></p></blockquote><h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>之前折腾过把 N1 刷成 armbian 桌面版，<a href="/2019/12/N1-armbian/">斐讯 N1、P1 安装 armbian 变身电脑主机</a>可以当一台小电脑使用。后来觉得我没这个需求，所以就没去用它了。</p><p>现在我想把 N1 刷成 armbian 服务器版，不需要桌面环境。因为我觉得，我用小钢炮最主要也是用 docker 和 smb 而已，那这个我用 armbian 也可以实现，而且刷成 armbian 我还可以用 WiFi ，N1 就不需要放在路由器旁边了。</p><h2 id="1、写入-U-盘"><a href="#1、写入-U-盘" class="headerlink" title="1、写入 U 盘"></a>1、写入 U 盘</h2><p>将镜像【Armbian_5.77_Aml-s905_Ubuntu_bionic_default_5.0.2_20190401.img】写入 U 盘，放入 dtb【meson-gxl-s905d-phicomm-n1-xiangsm.dtb】，修改 uEnv.ini，将第一行的dtb 名字改一下。U盘做好了。xiangsm 大佬在恩山上的帖子：<a href="https://www.right.com.cn/FORUM/thread-510423-1-1.html" target="_blank" rel="noopener">https://www.right.com.cn/FORUM/thread-510423-1-1.html</a></p><p>相关文件放在网盘：<a href="http://veger.ys168.com/" target="_blank" rel="noopener">http://veger.ys168.com/</a> 的【盒子】文件夹中</p><blockquote><p>armbian和dtb分别是什么来头，我简单说明一下：</p><ul><li><p>armbian：直接来源于armbian的官方，armbian其实就是debian发行版为arm架构适配后的版本。也就是说，恩山论坛是没有人去改动armbian系统代码的，是非常可靠的。</p></li><li><p>dtb：各种品牌的盒子千千万，每个盒子使用的网卡啊、cpu芯片啊的型号千千万，armbian内核为了能够和这些外设正常工作，就要求提供一种叫做dtb的描述文件，我理解就是针对各个硬件的驱动程序。</p><ul><li>为了让斐讯N1的各个硬件可以被armbian正常调度，所以需要给斐讯N1适配一套dtb文件。</li><li>dtb文件需要随着内核编译，所以不同armbian内核版本必须使用配套的dtb文件。</li><li>目前斐讯N1的dtb文件已经被armbian收录到官方源码库里，但是使用的时候linux负载会显示的很高，所以热心网友为armbian5.77编译了一个fix过的dtb文件。</li></ul><p>来自：<a href="https://yuerblog.cc/2019/10/23/%E6%96%90%E8%AE%AFn1-%E5%AE%8C%E7%BE%8E%E5%88%B7%E6%9C%BAarmbian%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">斐讯N1 – 完美刷机Armbian教程</a></p></li></ul></blockquote><h2 id="1-5-首次开机需注意"><a href="#1-5-首次开机需注意" class="headerlink" title="1.5 首次开机需注意"></a>1.5 首次开机需注意</h2><p>第一次启动，用户名 root ，密码 1234 。</p><p>登录成功后，会要求你更改密码，但是，但是，但是，需要你先输入当前的密码</p><figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">（<span class="literal">current</span>）UNIX password：</span><br></pre></td></tr></table></figure><p>也就是输入 1234，之后才是设置新的密码，要输入两次。</p><p>这样改好密码之后，会要求你创建一个新的用户，这里我们可以不用创建的，按 <code>ctrl + c</code> 取消。然后需要再登录一次。</p><h2 id="2、启动机器，修改源"><a href="#2、启动机器，修改源" class="headerlink" title="2、启动机器，修改源"></a>2、启动机器，修改源</h2><p><a href="https://www.right.com.cn/forum/thread-430903-1-1.html" target="_blank" rel="noopener">N1刷入Armbian后换软件源、安装Docker并提速</a>【这篇文章里的源是 debian 的】</p><p><a href="https://www.dragoncave.me/2019/07/armbian-on-n1.html" target="_blank" rel="noopener">斐讯N1折腾记 - Armbian 5.77 刷入与优化</a>【这篇有 ubuntu 和 debian 】我上面用的镜像是 ubuntu 的。</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/apt/sources.<span class="keyword">list</span></span><br></pre></td></tr></table></figure><p>进来后，按 dG 就可以把里面所有的内容删除，然后按 i 就可以进入输入模式，将下面的内容粘贴进去即可。</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu-ports/ bionic main restricted universe multiverse</span><br><span class="line">#deb-src http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu-ports/ bionic main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu-ports/ bionic-security main restricted universe multiverse</span><br><span class="line">#deb-src http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu-ports/ bionic-security main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu-ports/ bionic-updates main restricted universe multiverse</span><br><span class="line">#deb-src http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu-ports/ bionic-updates main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu-ports/ bionic-backports main restricted universe multiverse</span><br><span class="line">#deb-src http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu-ports/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p><strong>改 armbian 源</strong></p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources<span class="selector-class">.list</span><span class="selector-class">.d</span>/armbian.list</span><br></pre></td></tr></table></figure><p>将里面的那行注释掉（在前面添加 # ）然后添加这行</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/armbian bionic main bionic-utils bionic-desktop</span><br></pre></td></tr></table></figure><p>改完这两个后</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">update</span></span><br><span class="line">apt <span class="keyword">upgrade</span></span><br></pre></td></tr></table></figure><p>之后我视频中是安装了 zsh ，用这个 shell 会极大提高效率。有兴趣的看另外一篇文章去安装。</p><p><a href="/2020/03/zsh-note">最强 shell 非 zsh 莫属</a></p><h2 id="3、安装-docker-与改源"><a href="#3、安装-docker-与改源" class="headerlink" title="3、安装 docker 与改源"></a>3、安装 docker 与改源</h2><p>其实也可以用 armbian-config 里面的功能来安装。</p><p>这里我参考的是这篇教程：<a href="https://www.right.com.cn/forum/thread-430903-1-1.html" target="_blank" rel="noopener">N1刷入Armbian后换软件源、安装Docker并提速</a></p><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">curl </span>-<span class="string">fsSL </span><span class="string">https:</span>//<span class="string">get.</span><span class="string">docker.</span><span class="string">com </span>-o <span class="built_in">get-docker.sh</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">sh</span> <span class="built_in">get-docker.sh</span> <span class="built_in">--mirror</span> <span class="string">Aliyun</span></span><br></pre></td></tr></table></figure><p>使用上述命令安装会调用阿里云的镜像，安装速度较快。</p><p>之后修改 docker 镜像源</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>docker<span class="regexp">/daemon.json</span></span><br></pre></td></tr></table></figure><p>粘贴下面内容</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://dockerhub.azk8s.cn"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 docker</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systemctl daemon-reload</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">systemctl restart docker</span></span><br></pre></td></tr></table></figure><p>安装 portainer</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line">docker run -d -<span class="selector-tag">p</span> <span class="number">9000</span>:<span class="number">9000</span> -v /var/run/docker<span class="selector-class">.sock</span>:/var/run/docker<span class="selector-class">.sock</span> -v portainer_data:/data --restart always portainer/portainer</span><br></pre></td></tr></table></figure><p>这样我们就可以在浏览器输入 <code>IP:9000</code> 来管理 docker 了。</p><p>关于 docker 安装 qb 、filebrowser 之类，可以观看另外一篇文章，大概修改一下即可。</p><p><a href="/2020/02/about-N1-nano/">N1 小钢炮系统相关</a></p><h2 id="4、开机自动挂载硬盘"><a href="#4、开机自动挂载硬盘" class="headerlink" title="4、开机自动挂载硬盘"></a>4、开机自动挂载硬盘</h2><p>之后折腾开机自动挂载硬盘，参考这篇文章：<a href="https://blog.csdn.net/buxiaoxindasuile/article/details/49612867" target="_blank" rel="noopener">https://blog.csdn.net/buxiaoxindasuile/article/details/49612867</a></p><p>这里我重启后，硬盘的设备名，就从 sdb 变成 sda 了，所以就重新编辑一下 fstab ，之后就可以正常挂载了。</p><p>如果还是不行，就改用 uuid 吧。</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">blkid </span>/dev/sdb1</span><br></pre></td></tr></table></figure><p>这条命令可以显示硬盘信息，里面就有 uuid，然后修改 fstab 即可。例如我就是在 fstab 最后添加这行。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">UUID</span>=<span class="number">0000678400004823</span>   /media/<span class="literal">on</span>e      ntfs    defaults        <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="5、samba-共享"><a href="#5、samba-共享" class="headerlink" title="5、samba 共享"></a>5、samba 共享</h2><p>修改 apt 源 和 armbian 源 之后，再输入 armbian-config 就可以安装 samba 了。</p><p>也可以用</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install samba</span><br></pre></td></tr></table></figure><p>来安装。</p><p>关于 samba 的配置，可以看这篇文章：<a href="https://wiki.jikexueyuan.com/project/linux/samba.html" target="_blank" rel="noopener">https://wiki.jikexueyuan.com/project/linux/samba.html</a></p><p>这里不要在 armbian-config 里修改，退出后用 vim 编辑 /etc/samba/smb.conf</p><p>改完重启一下</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/smbd restart</span></span><br></pre></td></tr></table></figure><h2 id="6、安装我家云固件的导航"><a href="#6、安装我家云固件的导航" class="headerlink" title="6、安装我家云固件的导航"></a>6、安装我家云固件的导航</h2><p>这时我又想，之前我家云上面的导航好像不错，而且它也是用 armbian 修改的，那我用 N1 应该也可以用这个导航吧。于是根据乘风大佬的这篇文章：<a href="https://blog.windtech.cf/index.php/archives/10/" target="_blank" rel="noopener">https://blog.windtech.cf/index.php/archives/10/</a></p><p>在 armbian 上装了个导航。</p><p>将导航下载后，改名，如 1.zip</p><p>然后传到 N1 里面，<code>apt install zip</code> ，装一个 zip ，然后就可以解压这个压缩包。不过最好先把这个压缩包，移动到 /opt 中。也可以一开始就传到 /opt 中。</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/opt</span></span><br><span class="line">unzip 1.zip <span class="comment">#会解压出来两个文件</span></span><br><span class="line"><span class="string">./install_navi.sh</span><span class="comment">#执行里面的安装脚本</span></span><br></pre></td></tr></table></figure><p>一分多钟就可以安装完，然后在浏览器输入 N1 的 ip 就可以看到导航了。导航网页的位置在：/opt/wwwroot/navi/ ，可以自己修改里面的 index.php 。像我就自己修改了一些内容。</p><p><img src="/img/2020/修改后的导航.jpg" alt="修改后的导航"></p><h2 id="7、Nginx-开启-ipv6"><a href="#7、Nginx-开启-ipv6" class="headerlink" title="7、Nginx 开启 ipv6"></a>7、Nginx 开启 ipv6</h2><p>之后我将机器的 ipv6 地址绑定域名后，发现无法访问导航页面。而其它的端口是可以访问的，那难道是 nginx 的问题？查了一下，果然是因为 Nginx 没有开启 ipv6 支持导致的。开启方法如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /opt/etc/nginx/vhost/navi.conf</span><br></pre></td></tr></table></figure><p>将 <code>listen 80;</code><br>改为 <code>listen [::]:80;</code></p><p>之后再重启 Nginx 即可。</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">/opt/sbin/nginx</span> -s <span class="keyword">reload</span></span><br></pre></td></tr></table></figure><h2 id="8、用-rsync-备份"><a href="#8、用-rsync-备份" class="headerlink" title="8、用 rsync 备份"></a>8、用 rsync 备份</h2><p>因为我在 N1 上面搭建了一个 typecho 博客，文件都放在 /docker/typecho 中，为了安全，我想备份 typecho 文件夹到硬盘中，可以用这个命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -av /docker/typecho /media/one/lib</span><br></pre></td></tr></table></figure><p>rsync 使用详细可见：<a href="https://blog.csdn.net/wangjunjun2008/article/details/38658539" target="_blank" rel="noopener">https://blog.csdn.net/wangjunjun2008/article/details/38658539</a></p><p>当然这只是手动备份，我想设置它每天自动备份，于是用 <code>crontab -e</code> 进入计划任务编辑，在里面添加这一行</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">2</span> * * * rsync -av /docker/typecho /media/one/<span class="class"><span class="keyword">lib</span></span></span><br></pre></td></tr></table></figure><p>这样每天的凌晨两点，就会自动备份一次。</p><p>而且用 rsync 是增量备份，不用担心占太多空间的问题。</p><h2 id="9、修改时区"><a href="#9、修改时区" class="headerlink" title="9、修改时区"></a>9、修改时区</h2><p>在 armbian-config 里面改就行。</p><h2 id="10、写入-emmc"><a href="#10、写入-emmc" class="headerlink" title="10、写入 emmc"></a>10、写入 emmc</h2><p>有些教程说，直接用 nand-sata-install 这个命令，就可以把固件写入 emmc ，这样就不需要把系统刷回安卓。于是我在机器 emmc 里装的是小钢炮系统的情况下，执行这条命令，最后显示写入 emmc 成功。但是我关机，拔掉 U盘再启动，发现并不能启动……</p><p>所以我还是用之前的方法，将机器刷回安卓，再用 adb 让机器从U盘启动。之后将 <code>./install.sh</code> 将系统写入 emmc 。</p><p>这里有一个其他网友的评论</p><blockquote><p>线刷回安卓，再用 u 盘重刷armbian，绝对是一个干净彻底，重装armbian的好方法。而且绝对不会出现，mac地址重启变化的问题。</p></blockquote><p>这里我为什么等到最后才把系统写入 emmc 呢？其实是有这样的考虑的，我现在的系统是在 U盘 中的，它是我一步一步配置好的。如果我不介意的话，是可以一直U盘里的系统的。不过U盘当系统盘会加快U盘的损耗，还是不推荐。</p><p>那么它还有另外的作用，就是<strong>备份</strong>。我现在才把系统写入emmc，之后我就可以脱离U盘使用这个系统了。但是，之后如果因为我的误操作，或者其它的原因，导致系统坏了，或者有些功能不能用了。那么这时，我可以重新插入U盘，再一次将U盘中的系统写入emmc。</p><p>然后，可能有人会觉得，这样我的U盘岂不是，不能用来干其它事情了？因为里面存放着一个系统。那有没有什么办法，把里面的系统备份到电脑呢？</p><p>答案是有的。此时将U盘插入电脑，然后再打开【USB image tool】，但是这次我们不是把 img 写入U盘，而是用它，把U盘中的系统，导出为 img 文件。点击右下角的 backup 就可以备份，你的U盘有多大，备份出来的文件就有多大。</p><p><img src="/img/2020/备份U盘中的系统.jpg" alt="备份U盘中的系统"></p><p>那么这样你就可以那U盘去干其它的事情了。而之后如果你有需要，就将刚才的备份的 img 文件，再次写入 U盘即可。</p><h2 id="11、中文乱码问题"><a href="#11、中文乱码问题" class="headerlink" title="11、中文乱码问题"></a>11、中文乱码问题</h2><p>此时在终端中，无法显示和输入中文。解决方案来自 <a href="[https://yuerblog.cc/2019/10/23/%E6%96%90%E8%AE%AFn1-%E5%AE%8C%E7%BE%8E%E5%88%B7%E6%9C%BAarmbian%E6%95%99%E7%A8%8B/](https://yuerblog.cc/2019/10/23/斐讯n1-完美刷机armbian教程/">这篇文章</a>) 。</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>environment</span><br></pre></td></tr></table></figure><p>将最后一行改为</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">LC_ALL</span>=<span class="string">"en_US.utf-8"</span></span><br></pre></td></tr></table></figure><p>之后重新连接 ssh 应该就可以了。</p><h2 id="12、关于终端中的代理"><a href="#12、关于终端中的代理" class="headerlink" title="12、关于终端中的代理"></a>12、关于终端中的代理</h2><p>运行 Python 脚本需要依赖一些模块，那么就需要用到 pip</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">install</span> python3-pip</span><br></pre></td></tr></table></figure><p>然后就可以用 pip3 来安装模块了，比如</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> requests</span><br></pre></td></tr></table></figure><p>不过由于国内的网络环境，你不一定能成功装上。这时可能就需要用代理了，如果你的电脑有开小飞机的话，那么可以设置 N1 通过电脑来代理访问。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">url=http://192.168.1.2:1080</span><br><span class="line">export http_proxy=$url; export https_proxy=$url</span><br></pre></td></tr></table></figure><p>假设电脑的 ip 是 192.168.1.2 ，通过执行这两行命令之后，http https 的访问就会通过电脑的代理。例如 pip 安装模块，不用代理我根本没法安装成功，有时候 github clone 也一样，唉~</p><p>不可详讲。。。</p><hr><p>相关文件的下载链接放在网盘：<a href="http://veger.ys168.com/" target="_blank" rel="noopener">http://veger.ys168.com/</a> 的【盒子】文件夹中。</p><p>可能看完又有人要问，哪里可以买 N1 ？那一般就论坛买二手，拼多多买全新。这里分享一下论坛网友买 N1 的心得。</p><p><img src="/img/2020/N1精打细算购买法.png" alt="N1精打细算购买法"></p><p>总之想省钱就多上论坛逛逛吧。然后我看有些店，原系统和小钢炮系统居然相差20多块，确实有点坑。不过现在卖的 N1 很多都是黑色版的，不知道区别大不大，要买得先去了解一下。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;建议搭配视频观看：&lt;a href=&quot;https://youtu.be/_3LqxpzISqE&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Youtube&lt;/a&gt;    &lt;a href=&quot;https://www.bilibili.
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透工具 nps</title>
    <link href="https://powersee.github.io/2020/03/about-nps/"/>
    <id>https://powersee.github.io/2020/03/about-nps/</id>
    <published>2020-03-29T02:44:35.000Z</published>
    <updated>2020-03-29T07:46:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>nps 是一款内网穿透工具，在 Github 上面有一万多个 star ：<a href="https://github.com/ehang-io/nps" target="_blank" rel="noopener">https://github.com/ehang-io/nps</a></p><p>这个的原理和 frp 是一样的，都是用服务器来中转，不过用起来会简单一点。</p><blockquote><p>要想进行下面的操作，需要有一个服务器，如果你没有的话， <a href="https://www.vultr.com/?ref=8161953-4F" target="_blank" rel="noopener">点此链接注册充值 10 美元送 50 美元</a></p></blockquote><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p>服务器开好后，先下载 nps ，解压，安装，启动。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/ehang-io/nps/releases/download/v0.26.6/linux_amd64_server.tar.gz</span><br><span class="line">tar -zxvf linux_amd64_server.tar.gz</span><br><span class="line">./nps install</span><br><span class="line">nps start</span><br></pre></td></tr></table></figure><p>这样服务器就启动 nps 这个服务了，在浏览器输入 ip:8080 就可以进行管理。</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>像 N1 ，我家云，猫盘 这些设备，都是 arm64 ，因此它的使用方法都是一样的。</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/ehang-io/</span>nps<span class="regexp">/releases/</span>download<span class="regexp">/v0.26.6/</span>linux_arm64_client.tar.gz</span><br><span class="line">tar -zxvf linux_arm64_client.tar.gz</span><br></pre></td></tr></table></figure><p>然后需要到管理面板，添加客户端，这样会生成一个密钥。有了这个才能和服务器建立连接。</p><p>建立的命令是这样的。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">./npc <span class="attribute">-server</span>=ip:port <span class="attribute">-vkey</span>=web界面中显示的密钥</span><br></pre></td></tr></table></figure><p>例如我的就是这样</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">./npc <span class="attribute">-server</span>=45.32.126.224:8024 <span class="attribute">-vkey</span>=4vv7n1p7u584an64</span><br></pre></td></tr></table></figure><p>此时就与服务器建立好连接了，之后的操作只需在管理面板，进行端口映射即可。</p><h2 id="建立隧道"><a href="#建立隧道" class="headerlink" title="建立隧道"></a>建立隧道</h2><p>点击左边的【TCP 隧道】，【新增】，填写【ID】，服务器访问端口，目标端口。</p><p>比如我服务器端口设置为 1234 ，目标端口为 80 ，建立好后，我只要访问服务器的1234端口，就可以看到内网设备 80 端口的内容。想要访问其它的端口，就再建立隧道。内网的端口和服务器的端口是可以保持一致的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原本以为，它只是用起来比 frp 简单。但现在发现不止于此，还有其它很多功能。</p><p>首先作为内网穿透工具，它用起来确实简单，点几下就可以建立好连接。</p><p>然后里面的域名解析功能，用起来也非常的简单。事先把 <code>*.xxx.com</code> 解析到服务器，之后就可以实现不同的子域名，访问不同的页面了。</p><p>然后我发现，用 nps 也是可以套 CDN 的，这样就不用担心自己的 IP 暴露了，不过速度会变慢一些。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nps 是一款内网穿透工具，在 Github 上面有一万多个 star ：&lt;a href=&quot;https://github.com/ehang-io/nps&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/ehang-io
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>猫盘群晖折腾记录</title>
    <link href="https://powersee.github.io/2020/03/maopan/"/>
    <id>https://powersee.github.io/2020/03/maopan/</id>
    <published>2020-03-27T07:01:24.000Z</published>
    <updated>2020-04-17T09:39:22.627Z</updated>
    
    <content type="html"><![CDATA[<p>最近研究猫盘这台设备，恩山上面谈论这个好像不多。所以我找到了其它几个好去处。</p><ol><li><a href="https://www.huakings.cn/category/maopan/" target="_blank" rel="noopener">花王网络</a></li><li><a href="http://bbs.nas66.com/forum-38-1.html" target="_blank" rel="noopener">矿渣论坛</a></li></ol><p>这两个地方可以学到很多东西，感谢各位大佬的付出。</p><p>记录一些教程文章</p><p><a href="https://zhuanlan.zhihu.com/p/104139410" target="_blank" rel="noopener">将猫盘固件从 DS119J 升级为 DS120J</a></p><p><a href="https://www.cnblogs.com/housestudy/p/11968726.html" target="_blank" rel="noopener">猫盘群辉装qbittorrent和aria2</a></p><hr><p>由于我的机器是卖家帮我刷好群晖系统，再给我发过来的，所以我没有去折腾刷机这些东西。</p><h2 id="一、开启LED灯"><a href="#一、开启LED灯" class="headerlink" title="一、开启LED灯"></a>一、开启LED灯</h2><p>上面的花王网络的博主，写了一个脚本可以控制 LED 灯的颜色，有人把它转载到 什么值得买 上面了。<a href="https://post.smzdm.com/p/aqn96mx2/" target="_blank" rel="noopener">万能的脚本让猫盘变完美</a> ，通过添加任务计划，我们就可以实现开机后，显示绿灯，关机后显示红灯。（因为猫盘关机只是系统关了而已，风扇其实还是在转的……所以有时不知道机器，是处于开机还是关机状态）</p><p>脚本的下载链接是这个</p><p><a href="https://www.huakings.cn/mp202003/aw2013_led_syno.sh" target="_blank" rel="noopener">https://www.huakings.cn/mp202003/aw2013_led_syno.sh</a></p><p><a href="/misc/2020/aw2013_led_syno.sh">本人备份</a></p><h2 id="二、关于掉-ip-的问题"><a href="#二、关于掉-ip-的问题" class="headerlink" title="二、关于掉 ip 的问题"></a>二、关于掉 ip 的问题</h2><p>这台机器掉 ip 严重。指的是，机器启动后，有时候会获取不到 ip，这个是硬件问题，所以有些设备用得一直很稳，有的就频频掉 ip 。例如论坛中有人说，机器启动五次，只有一次可以获取到 ip 。</p><p>我自己的也有这个问题，有时候也获取不到 ip 。解决的方法只有重启，还是获取不到，那就等断电等十分钟，再启动一般就可以获取到了。</p><h2 id="三、掉盘"><a href="#三、掉盘" class="headerlink" title="三、掉盘"></a>三、掉盘</h2><p>机器刚到手时，急切想了解它。于是把 N1 上面的硬盘拆下来，放到里面安装群晖系统。进入系统后发现，硬盘有坏道，时不时地就发出 “ 吱、吱、吱 ” 的异响。再过一会就发现掉盘了，就是硬盘明明连接着，却显示找不到硬盘，重启也没用。而我拿连接电脑却可以识别……</p><p>那估计群晖对硬盘的要求比较高吧，而我这块硬盘已经买了好几年了，而且有坏道，估计它被群晖嫌弃了。没法，就到闲鱼再买一块。</p><p>小猫盘只能用 2.5 寸的硬盘，这个在闲鱼比较贵，500G 的要一百块，唉，买不起。最终找了一款 320G 的，59 块包邮。卖家写全新零通电。</p><p>买来就可以愉快地使用群晖系统了。下载、共享、备份相册、安装 Python ……</p><p>然而第二天就发生悲剧了，开机几分钟后，就会掉盘。硬盘又时不时地就发出 “ 吱、吱、吱 ” 的异响。然而我这硬盘是新买的啊，难到闲鱼卖家坑我？于是我把硬盘拿到电脑扫一下。</p><p><img src="/img/2020/硬盘全绿.jpg" alt="硬盘全绿"></p><p>发现并没法坏道啊，怎么昨天还好好的，今天就不能用了呢？郁闷。难道这硬盘不够高档，又被群晖嫌弃了？那这群晖系统也太难伺候了吧。</p><h2 id="四、九曲十八弯的拯救大行动"><a href="#四、九曲十八弯的拯救大行动" class="headerlink" title="四、九曲十八弯的拯救大行动"></a>四、九曲十八弯的拯救大行动</h2><p>本打算把系统充 119j 升级 120j ，看看能否解决这个问题。如果不行再试试把系统刷程 one space XP3 ，如果刷成这个系统也有问题，就证明是硬件的问题，估计就没救了。</p><p>正当我准备刷机的时候，突然想到，有时候我打开插排的电源，猫盘这个机器并没有启动，风扇并没有转，需要我碰一下猫盘的电线才会转，那难道是电线接触不良的问题？</p><p>于是我把之前淘宝 1.5 包邮买的 USB 转 DC 5.5 拿出来，想用这条线试一下。（之前买这条线是想试一下能否用这来给 N1 供电，结果发现机器的灯会亮，但是无法进入系统。）结果发现，这条线无法插入猫盘……明明可以插入 N1 的……</p><p>不过我还有另外一条线，是淘宝 9.9 包邮买的，叫【诱骗激活线9-12V充电宝移动电源路由器USB供电】，输出12V的，我用这个加我那个12V的小米手机充电头，就可以给 N1 供电，并正常使用，不过这成本太高了。9.9 + 19.9 = 29.8 ，还是老实用斐讯自身的电源适配器吧。</p><p>那么这条用不到的线，拿来给猫盘供电，配合猫盘自带的 5V3A 的充电头。就发现机器可以正常使用了。</p><p>其实真的很意外的，因为一开始线接触不良，机器是无法启动的，我轻轻碰一下线就可以启动了。但是使用中电线如果接触不良，不应该是整台机器断电吗？怎么只是硬盘异响，然后掉盘而已呢？机器风扇依然转动着，如果不是刚好手上有这台多余的电线，估计我还得为刷机去折腾很久吧。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>玩矿渣很废时间。</p><h2 id="折腾升级-120j"><a href="#折腾升级-120j" class="headerlink" title="折腾升级 120j"></a>折腾升级 120j</h2><p>群晖的 119j 这台机器，是 256M 内存。我们的猫盘是 512M ，所以有些人觉得，刷 119j 的固件，可能只能用一半的内存而已。而 120j 就和猫盘一样是 512M 的内存，那把固件升级到 120j 是否就可以，发挥猫盘真正的性能呢？</p><p>没升级前，内存最高只能用到 53%，平时大多维持在 48%</p><p><img src="/img/2020/最高53.jpg" alt="最高53%"></p><p>于是根据这篇文章：<a href="https://zhuanlan.zhihu.com/p/104139410" target="_blank" rel="noopener">将猫盘固件从 DS119J 升级为 DS120J</a> 升级一下 ，升级后内容不会丢失，可以放心升级。</p><p>然后我发现最高能到 60%，但是平时大多也是维持在 48%</p><p>所以，我认为升不升级，应该是一样的。原先的 119j 应该是没有限制内存的，因为白群晖本来就是可以升级内存的。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol><li><p>群晖里面的下载器，ds station 是可以用 transdroid 来控制的。</p></li><li><p>使用 ipv6 来远程访问群晖效果还不错。</p></li><li><p>moments 来管理相册感觉不习惯，还是 photo station 好。</p></li><li><p>刚才又把 k2p 拿过来了，然后我就顺便测试一下 smb 的读写速度。</p><ul><li>读取在 65 M/S 左右</li></ul><p><img src="/img/2020/cat-read.jpg" alt="cat-read"></p><ul><li>写入在 7 M/S 左右……</li></ul><p><img src="/img/2020/cat-write.jpg" alt="cat-write"></p><p>直接把文件拖浏览器中，也差不多是这个速度，不太懂……</p></li></ol><h3 id="USB-扩展"><a href="#USB-扩展" class="headerlink" title="USB 扩展"></a>USB 扩展</h3><p>后来又在淘宝买了个USB扩展版，直接套在主板的 TTL 线上面，就可以连接USB设备了。如果长期使用，就得自己把猫盘的后壳打孔了。</p><p>东西我拿到手后，插上猫盘带主板，然后接一个U盘，确实可以识别到。但是，一下子就出问题了。一两分钟就断开一次，感觉像是接触不良，检查一下发现我插得挺紧的。问了一下淘宝客服，直接回复，东西接触上能显示，就是能用，要是不能用就是不能用……</p><p>总之也没给出这问题怎么解决，估计他也不知道吧，想想还挺气的，想给他个中评，看他小店只卖出过几样东西，还是于心不忍，算了算了，确认收货等系统自动好评就是了，这东西就当丢了吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近研究猫盘这台设备，恩山上面谈论这个好像不多。所以我找到了其它几个好去处。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.huakings.cn/category/maopan/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;花王网
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>我家云设置贴吧自动签到</title>
    <link href="https://powersee.github.io/2020/03/wjy-python/"/>
    <id>https://powersee.github.io/2020/03/wjy-python/</id>
    <published>2020-03-19T12:04:49.000Z</published>
    <updated>2020-03-19T12:37:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>需要先安装pip</p><p>对于 Python3.x 的</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install python3-pip</span><br></pre></td></tr></table></figure><p>装好后用 pip3 来装 requests 这个模块</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> requests</span><br></pre></td></tr></table></figure><p>之后我们就可以到 github 上面拉取 tieba 签到脚本了。</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/powersee/</span>some-scripts<span class="regexp">/master/</span>baidutieba_signin.py</span><br></pre></td></tr></table></figure><p>然后需要填写 cookie ，之后就能用 Python 来运行这个脚本了。</p><p><img src="/img/2020/firefox-cookie.jpg" alt="firefox-cookie"></p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python3</span> baidutieba_signin.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>一切顺利的话，就看到签到信息了。但是这还不够，我想让它每天自动执行。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>之后会让你选择编辑器，默认是使用 nano ，这个比较容易使用。也可以选择第二个 vim 。当然这里选后不喜欢，可以用 select-editor 这个命令来重新选择。</p><p>进入编辑器后，在里面添加这一行，就可以在每天的 7 点和 8 点，自动执行这个脚本去签到，然后将输出的信息，保存在 /root/tieba.log 这个文件里。</p><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">7</span>,<span class="number">8</span> * * * python3 /root/baidutieba_signin.py &gt;&gt; /root/tieba.<span class="keyword">log</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;需要先安装pip&lt;/p&gt;
&lt;p&gt;对于 Python3.x 的&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt-&lt;span class
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
      <category term="python" scheme="https://powersee.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>我家云相关</title>
    <link href="https://powersee.github.io/2020/03/wojiayun/"/>
    <id>https://powersee.github.io/2020/03/wojiayun/</id>
    <published>2020-03-13T08:20:35.000Z</published>
    <updated>2020-04-09T14:28:35.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>我家云，又名掉盘云，众多矿渣中的一款。其配置还算不错，但由于有一个严重的缺点——掉盘，即机器内的硬盘时不时地，就自动断开连接，导致获得【掉盘云】这个荣称。也因此而难以获得垃圾佬们的芳心，二手价格长期维持在百元以下。</p><p>不过现今有大佬开发了比较好用的固件，据说很多人解决了掉盘的问题，因此价格开始逐渐上升了。</p><p>恩山固件发布贴：<a href="https://www.right.com.cn/forum/thread-976714-1-1.html" target="_blank" rel="noopener">粒子云，我家云omv自用备份稳定性佳</a></p><p>固件作者：Ride_Wind，<a href="https://www.right.com.cn/forum/space-uid-155217.html" target="_blank" rel="noopener">恩山链接</a></p><p>博客：<a href="https://blog.windtech.cf/" target="_blank" rel="noopener">https://blog.windtech.cf/</a></p><h2 id="刷机相关"><a href="#刷机相关" class="headerlink" title="刷机相关"></a>刷机相关</h2><blockquote><p>这里放置一个刷机所需工具和固件的备份：<br><a href="https://pan.baidu.com/s/1YTlrbDDN9p11CayfaD6vIQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1YTlrbDDN9p11CayfaD6vIQ</a></p></blockquote><p>【webpad】大佬的刷机教程 <a href="https://www.right.com.cn/forum/thread-341574-1-1.html" target="_blank" rel="noopener">联想粒子矿云/我家云 线刷OMV（Open Media Vault），图文教程</a></p><p>推荐文章教程：来自 smzdm 的【阿文菌】 <a href="https://post.smzdm.com/p/az50epz5/" target="_blank" rel="noopener">我家云 保姆级教程：完美OMV固件</a></p><p>第一次刷机如果只显示【发现一个 loader 设备】，可以点击高级功能，里面可以点【进入 maskrom】</p><p><img src="/img/2020/高级功能.png" alt="高级功能"></p><p>不过我刷机的时候并不知道这个，我是把机器拆开，然后找一根很短的电线，短接主板后面的两个点。</p><p><img src="/img/2020/短接.jpg" alt="短接"></p><p>一手按住，一手通电，机器一启动就自动进入 maskrom 了，然后便可以愉快地刷机，这种方法也是终极的救砖方法。</p><h2 id="docker相关"><a href="#docker相关" class="headerlink" title="docker相关"></a>docker相关</h2><p>乘风大佬的固件，本身就修改好 docker 的镜像源了，因此我们可以直接拉取镜像。</p><h3 id="portainer"><a href="#portainer" class="headerlink" title="portainer"></a>portainer</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line">docker run -d -p <span class="number">9000</span>:<span class="number">9000</span> -v <span class="regexp">/var/</span>run<span class="regexp">/docker.sock:/</span>var<span class="regexp">/run/</span>docker.sock -v <span class="string">portainer_data:</span><span class="regexp">/data --restart always portainer/</span><span class="string">portainer:</span>linux-arm</span><br></pre></td></tr></table></figure><h3 id="qbittorrent"><a href="#qbittorrent" class="headerlink" title="qbittorrent"></a>qbittorrent</h3><p>自带的 qb 是 4.1.7 ，它好像有个问题，没法通过链接的方式来下载种子。所以我想把它停了，改用 docker 来创建一个最新版的 qb 。</p><p>那么我需要先把自带的 qb 的开机自起取消，这个比较容易，改个名字它就不会启动了。</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">mv</span> /<span class="meta">opt</span>/<span class="keyword">bin/qbittorrent-nox </span>/<span class="meta">opt</span>/<span class="keyword">bin/1qbittorrent-nox</span></span><br></pre></td></tr></table></figure><p>qb最重要的两个文件夹 <code>.config</code> 和 <code>.local</code> ，自带的 qb 是将其放在 <code>/root</code> 里，如果你使用 docker 版的 qb 后，想保留之前的种子信息，下方的 -v 参数自己修改一下。我就不保留了。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">IMAGE_NAME</span>=80x86/qbittorrent:4.2.1-arm64</span><br><span class="line"><span class="comment">#这里我原本的默认下载路径是 /sharedfolders/wjy/ 你应该改成自己的</span></span><br><span class="line"><span class="attribute">DOWNLOAD_PATH</span>=/sharedfolders/wjy/</span><br><span class="line"><span class="attribute">QBT_AUTH_SERVER_ADDR</span>=<span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line">docker <span class="builtin-name">run</span> -d --name qbittorrent \</span><br><span class="line">        -e <span class="attribute">WEB_PORT</span>=8080 \</span><br><span class="line">        -e <span class="attribute">BT_PORT</span>=8998 \</span><br><span class="line">        -e <span class="attribute">QBT_AUTH_SERVER_ADDR</span>=<span class="variable">$QBT_AUTH_SERVER_ADDR</span> \</span><br><span class="line">        --restart unless-stopped \</span><br><span class="line">        --network host \</span><br><span class="line">        -v /var/lib/qbittorrent/.config/qBittorrent:<span class="built_in">/config </span>\</span><br><span class="line">        -v /var/lib/qbittorrent/.local/share/data/qBittorrent:/data \</span><br><span class="line">        -v <span class="string">"<span class="variable">$DOWNLOAD_PATH</span>"</span>:/downloads \</span><br><span class="line">        -v <span class="string">"<span class="variable">$DOWNLOAD_PATH</span>"</span>:<span class="string">"<span class="variable">$DOWNLOAD_PATH</span>"</span> \</span><br><span class="line">        --mount <span class="attribute">type</span>=tmpfs,destination=/tmp \</span><br><span class="line">        <span class="variable">$&#123;IMAGE_NAME&#125;</span></span><br></pre></td></tr></table></figure><p>之后可能会出现文件夹权限问题，将会导致 qb 无法启动，给予 777 权限</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">chmod -R <span class="number">777</span> /var/<span class="class"><span class="keyword">lib</span>/<span class="title">qbittorrent</span>/</span></span><br></pre></td></tr></table></figure><h2 id="导航相关"><a href="#导航相关" class="headerlink" title="导航相关"></a>导航相关</h2><p>在web导航页面添加或者删除图标，修改 /opt/wwwroot/navi/index.php</p><h2 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h2><h3 id="查看-CPU-温度"><a href="#查看-CPU-温度" class="headerlink" title="查看 CPU 温度"></a>查看 CPU 温度</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">cpu=<span class="variable">$(</span>&lt;<span class="regexp">/sys/class</span><span class="regexp">/thermal/thermal</span>_zone<span class="number">0</span>/temp)</span><br><span class="line">echo <span class="string">"$((cpu/1000)) c"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;我家云，又名掉盘云，众多矿渣中的一款。其配置还算不错，但由于有一个严重的缺点——掉盘，即机器内的硬盘时不时地，就自动断开连接，导致获得【掉盘
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>装好 Mojave 之后要做的事</title>
    <link href="https://powersee.github.io/2020/03/Mojave/"/>
    <id>https://powersee.github.io/2020/03/Mojave/</id>
    <published>2020-03-08T12:26:20.000Z</published>
    <updated>2020-03-18T05:25:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近越来越觉得 macOS 的 10.15 版本很不好用，刚好手边也有一块闲置的硬盘，于是我想用它装 10.14 的 macOS 。</p><p>重新下载镜像，写入 U 盘，修改 config ，重启写入硬盘，完成。由于装过很多次，对此也算是轻车熟路。麻烦的是之后的驱动，以及常用软件的下载。</p><h2 id="0，声卡驱动"><a href="#0，声卡驱动" class="headerlink" title="0，声卡驱动"></a>0，声卡驱动</h2><p>github 下载最新的 applealc ，放入 kexts 里的 other ，把里面的万能声卡移出来。clover configurator 里注入 id，重启完成。</p><h2 id="1，调整按键"><a href="#1，调整按键" class="headerlink" title="1，调整按键"></a>1，调整按键</h2><p>由于使用 macOS 时，最主要用到的按键是 command ，在普通键盘上就是 Windows 键。为了能够和平时一样使用 ctrl + c , ctrl + v 来复制粘贴。可以在【系统偏好设置】–【键盘】–【修饰键…】里面将两者的位置换一下。</p><h2 id="2，开启-hidpi"><a href="#2，开启-hidpi" class="headerlink" title="2，开启 hidpi"></a>2，开启 hidpi</h2><p>如果使用原生的分辨率，字体会非常的小，而且还会模糊。这种情况在 Windows 上面也有，不过 Windows 上我们可以开启屏幕缩放，比如我的 1080P 显示器，我就比较喜欢开启 115% 的缩放。但是在 macOS 上，官方的设定是用 4K 的显示器时，就可以在【系统偏好设置】–【显示器】开启。然而我并没有 4K 的显示器……<br>这时就只能自己来手动开启了。</p><p><a href="https://github.com/xzhih/one-key-hidpi" target="_blank" rel="noopener">https://github.com/xzhih/one-key-hidpi</a></p><p>用 GitHub 上的这个脚本很容易就可以开启。（在 Catalina 里面的会复杂一些，因为一些权限的问题）<br>然后，此时在【系统偏好设置】–【显示器】的缩放里面就能看到选项了。但是能选的并不多，这时可以下载一个工具，RDM</p><p><a href="http://www.pc6.com/mac/441275.html" target="_blank" rel="noopener">http://www.pc6.com/mac/441275.html</a></p><p>这个工具提供更多的选择，比如我的显示器是 1920 × 1200 的，在系统里有 1280 × 800 和 1650 × 1050 的选项，但是用这个工具后，我可以选择 1440 × 900 。这个分辨率我个人觉得更加合适。</p><h2 id="3，oh-my-zsh-与-iterm2"><a href="#3，oh-my-zsh-与-iterm2" class="headerlink" title="3，oh my zsh 与 iterm2"></a>3，oh my zsh 与 iterm2</h2><p>由于系统本身就自带有 zsh 这个 shell 了，所以我只需要再装一下 oh-my-zsh ，然后在其装好时会询问【是否将 zsh 设置为默认的 shell】，选择是即可。<br>之后安装 iterm2 替代 terminal 。</p><p>然后我还可以把之前系统的用户目录下的【.zshrc】和【.zsh_history】复制过来。</p><h2 id="4，复制-ssh-文件夹"><a href="#4，复制-ssh-文件夹" class="headerlink" title="4，复制 .ssh 文件夹"></a>4，复制 .ssh 文件夹</h2><p>这个文件夹里存放着私钥，直接复制过来我就可以 ssh 连接其它终端，以及 GitHub 之类。</p><h2 id="5，导入-fcpx-的设定"><a href="#5，导入-fcpx-的设定" class="headerlink" title="5，导入 fcpx 的设定"></a>5，导入 fcpx 的设定</h2><p>主要是自定义的键盘设置，还有 compressor 中的自定义的预设。</p><blockquote><p>暂时写到这……</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近越来越觉得 macOS 的 10.15 版本很不好用，刚好手边也有一块闲置的硬盘，于是我想用它装 10.14 的 macOS 。&lt;/p&gt;
&lt;p&gt;重新下载镜像，写入 U 盘，修改 config ，重启写入硬盘，完成。由于装过很多次，对此也算是轻车熟路。麻烦的是之后的驱动，
      
    
    </summary>
    
    
      <category term="mac" scheme="https://powersee.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>备份整个 Linux 系统</title>
    <link href="https://powersee.github.io/2020/03/backup/"/>
    <id>https://powersee.github.io/2020/03/backup/</id>
    <published>2020-03-06T14:39:07.000Z</published>
    <updated>2020-03-31T02:57:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>近来经常折腾 N1 ，刷机频繁。然后我就想，我能否把现在用的这个系统，整个备份一下呢？就像 Windows 上的 ghost 一样。</p><p>接着我就到 恩山 搜一下，果然也有人有过这个想法，并且发帖问了。但是下方的评论看起来好像挺难的。但我记得之前看过用 dd 这个命令就可以，所以我先来试试。</p><p>首先要知道当前的机器上有哪些磁盘，用 <code>fdisk -l</code> 可以查出</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> fdisk -l</span></span><br><span class="line">Disk /dev/mmcblk0: 7.3 GiB, 7818182656 bytes, 15269888 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line">Disk /dev/mmcblk0boot1: 4 MiB, 4194304 bytes, 8192 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line">Disk /dev/mmcblk0boot0: 4 MiB, 4194304 bytes, 8192 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 465.8 GiB, 500107862016 bytes, 976773168 sectors</span><br></pre></td></tr></table></figure><p>可以看出， mmcb1k0 就是机器自身的硬盘，而 sda 则是我自己外接的移动硬盘。</p><p>经过了解知道，dd 可以将当前整块磁盘的内容，完整地复制到其它的磁盘。命令如下：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=<span class="regexp">/dev/sda</span> <span class="keyword">of</span>=<span class="regexp">/dev/sdb</span></span><br></pre></td></tr></table></figure><p>这样就是把 sda 这块盘的内容复制到 sdb 里</p><p>但是平时从网上下载的固件主要是 img 格式的，这种怎么做呢？同样用 dd 就行：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=<span class="regexp">/dev/sda</span> <span class="keyword">of</span>=<span class="regexp">/media/one</span><span class="regexp">/backup.img</span></span><br></pre></td></tr></table></figure><p>我在 N1 上用的命令是这个：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=<span class="regexp">/dev/mmcblk</span>0 <span class="keyword">of</span>=<span class="regexp">/media/one</span><span class="regexp">/back.img</span></span><br></pre></td></tr></table></figure><p>等了好久好久，才复制完成，此时在我移动硬盘的根目录下，可以看到一个 back.img 文件。</p><p>之前要恢复的话，用这个命令</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">dd</span> <span class="keyword">if</span>=/media/one/back<span class="selector-class">.img</span> of=/dev/mmcblk0</span><br></pre></td></tr></table></figure><p>在 ubuntu 中将系统dd到 U盘</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">sudo dd if=/dev/sda of=/dev/sdb conv=noerror,sync</span><br><span class="line">^C14583513+<span class="number">0</span> records in</span><br><span class="line"><span class="number">14583513</span>+<span class="number">0</span> records out</span><br><span class="line"><span class="number">7466758656</span> bytes (<span class="number">7.5</span> GB, <span class="number">7.0</span> GiB) copied, <span class="number">7048.69</span> s, <span class="number">1.1</span> MB/s</span><br></pre></td></tr></table></figure><p>写了两个小时还没好，要去睡觉了，只能 ctrl+c 取消，结果发现只剩 0.5 G还没写。。。</p><hr><p>时隔多日，我已经把 N1 刷成了 armbian 无桌面版，配置花了好多时间。所以应该备份一下系统，自己之后把系统搞坏了，也可以用来恢复</p><p>于是我同样将系统备份到硬盘，7.3G 用了 40 分钟。</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment"># root @ powersee in ~ [18:40:49] </span></span><br><span class="line">$ dd <span class="keyword">if</span>=<span class="regexp">/dev/mmcblk</span>1 <span class="keyword">of</span>=<span class="regexp">/media/one</span><span class="regexp">/back.img</span></span><br><span class="line"><span class="regexp">15269888+0 records in</span></span><br><span class="line"><span class="regexp">15269888+0 records out</span></span><br><span class="line"><span class="regexp">7818182656 bytes (7.8 GB, 7.3 GiB) copied, 2434.71 s, 3.2 MB/s</span></span><br></pre></td></tr></table></figure><p>之后我把这个 img 文件，复制到电脑，然后用工具将它写入 U盘，之后插到 emmc 里面同样是 armbian 的N1上，结果开机后进入的还是 emmc 里的系统。但是通过 fdisk -l 我发现，boot 分区是在U盘里的。也就是说，N1是从U盘读取启动文件，然后启动 emmc 里面的系统，不知道 emmc 里是其它系统时，是否就能从 U盘启动系统？以后了解了再来更新。</p><p>然后觉得用 dd 命令有个大缺点，就是我系统磁盘是 7.3G，那么备份出来的 img 文件就是这么大，明明我系统只占 4G……</p><hr><p>最终方案，我发现对于备份 N1 系统，或许没那么麻烦，因为一开始系统是在U盘里的，所以我可以先对U盘里的系统进行修改，装 docker 、samba 、修改源……</p><p>然后，我可以用 USB image tool ，把U盘中的系统备份到电脑。之后如果我把系统搞坏了，那我可以把系统恢复到U盘，再写入emmc。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近来经常折腾 N1 ，刷机频繁。然后我就想，我能否把现在用的这个系统，整个备份一下呢？就像 Windows 上的 ghost 一样。&lt;/p&gt;
&lt;p&gt;接着我就到 恩山 搜一下，果然也有人有过这个想法，并且发帖问了。但是下方的评论看起来好像挺难的。但我记得之前看过用 dd 这个
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>进阶了解 hexo 博客</title>
    <link href="https://powersee.github.io/2020/02/more-about-hexo/"/>
    <id>https://powersee.github.io/2020/02/more-about-hexo/</id>
    <published>2020-02-23T09:54:01.000Z</published>
    <updated>2020-02-23T11:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>个人使用 hexo 搭建博客已经有一年多的时间了。但是说实在，对其了解并不多，我只知道用它，可以把我的 markdown 文档渲染成 html 文件，之后放到 GitHub 上就可以搭建博客。</p><a id="more"></a><p>一开始的使用是看别人的教程，网上一堆人写了用 hexo 来搭建免费博客的文章。其官网 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a> 上面也有教程，几条命令就可以在电脑上弄好一个博客。</p><p>之后便是将文章推送到 GitHub 上面，进行设置，使用 GitHub page 建立博客网站。在这时我了解到，我们还可以搭建在国内的网站上面，如 gitee ，coding 。可以让我们的访问速度更快。而且之前还了解到有位老哥有一个不错的方法，可以让国外的 ip 就访问 github 的博客，国内的 ip 就访问 gitee 或者 coding 的博客。好像是利用域名解析来达到目的的，具体我没有去尝试。</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>不像　wordpress ，所有文件都是在服务器上。hexo 的博客源文件都是在我们自己的电脑上面的，如果我们的电脑出问题，如硬盘坏了，被偷了，那么我们的博客就没法更新和修改。因此我们需要自己来备份这些文件。</p><p>如果只是想备份文章而已，那么同步网盘如 onedrive 、坚果云 也足够的。当然你想同步整个博客文件夹也可以，不过我不建议这么做，因为里面的文件实在太多了，之前　git push　的时候看到，好像有几万个文件。而且，这样也太 low 了。</p><p>正确的备份方法应该是使用 git 来备份。</p><h3 id="备份前准备"><a href="#备份前准备" class="headerlink" title="备份前准备"></a>备份前准备</h3><p>我们得知道我们备份的目的，像我的话，我最主要的目的是备份文章，其次是博客主题，再来是博客的一些配置。<strong>目的明确</strong>之后，就来分析博客根目录下的文件。</p><p>需要备份的</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source //文件夹放置着博客文章，最最重要的一个文件夹</span><br><span class="line">themes //放置着主题，我个人喜欢一起备份</span><br><span class="line">scaffolds //页面模板位置</span><br><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure><p>不需要备份的</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.deploy_git   //里面的文件除了多一个 .git 其它和 public 里面一样</span><br><span class="line">node_modules  //在根目录下 npm i 就会读取 package.json 来安装模块，没必要备份</span><br><span class="line">public      // hexo 生成 html 页面后所放的地方，hexo g 就可以生成，没必要备份</span><br><span class="line">db.json       //执行 hexo s 启动本地服务器的时候就会自动生成，没必要备份</span><br></pre></td></tr></table></figure><p>了解这些之后，我们就可以只备份必要的文件。</p><h3 id="以前的备份方案"><a href="#以前的备份方案" class="headerlink" title="以前的备份方案"></a>以前的备份方案</h3><p>我之前是根据这篇文章　<a href="https://www.jianshu.com/p/beb8d611340a" target="_blank" rel="noopener">Hexo博客从一台电脑迁移到其他电脑</a>　将博客源文件备份到 GitHub 上面。这个方法是让渲染文件和博客源文件，都放在同一个仓库里面的不同分支。但我个人觉得到不如放两个仓库好。</p><h3 id="现在的备份方案"><a href="#现在的备份方案" class="headerlink" title="现在的备份方案"></a>现在的备份方案</h3><p>首先我们如果想备份主题的话，需要把主题文件夹里的 <code>.git</code> 给删除了，让它变成一个普通的文件夹。比如很多人使用的 <code>next</code> 主题，就进入 <code>themes/next</code> 里面将 .git 文件夹给删除了就行。</p><p>在博客根目录下 <code>git init</code> ,让其变成一个 git 仓库。将那些不需要备份的文件和文件夹添加到 <code>.gitignore</code> 中，我的里面有这些内容。</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">public</span><br><span class="line">db.json</span><br><span class="line">.deploy_git</span><br><span class="line">.DS_Store</span><br><span class="line">node_modules</span><br></pre></td></tr></table></figure><p>之后 <code>git add .</code> ，再 commit ，然后将其推送到远程仓库即可。之后换电脑，只需把这个仓库 clone 到电脑，进入仓库， <code>npm i</code> 一下，npm 就会根据两个 package 开头的文件，去帮我们安装相对应的模块，之后我们便可以看到 <code>node_modules</code> 文件夹又回来了。此时我们的博客便已搭建成功，可以继续写博客了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;个人使用 hexo 搭建博客已经有一年多的时间了。但是说实在，对其了解并不多，我只知道用它，可以把我的 markdown 文档渲染成 html 文件，之后放到 GitHub 上就可以搭建博客。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="WordPress" scheme="https://powersee.github.io/tags/WordPress/"/>
    
  </entry>
  
  <entry>
    <title>N1 小钢炮系统相关</title>
    <link href="https://powersee.github.io/2020/02/about-N1-nano/"/>
    <id>https://powersee.github.io/2020/02/about-N1-nano/</id>
    <published>2020-02-14T03:54:43.000Z</published>
    <updated>2020-03-30T06:13:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录一些跟小钢炮系统相关的网址、docker 命令等。</p><a id="more"></a><blockquote><p>建议搭配视频使用：<a href="https://www.bilibili.com/video/av88448594" target="_blank" rel="noopener">小钢炮系统使用指南</a></p></blockquote><h2 id="系统固件下载"><a href="#系统固件下载" class="headerlink" title="系统固件下载"></a>系统固件下载</h2><p><a href="https://rom.nanodm.net/" target="_blank" rel="noopener">https://rom.nanodm.net/</a></p><h2 id="docker-国内源"><a href="#docker-国内源" class="headerlink" title="docker 国内源"></a>docker 国内源</h2><p>编辑配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>将里面的内容改为这样</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://dockerhub.azk8s.cn"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改完去 system 里的 Startup 将 docker 停止，再启动。</p><p>之后我们安装 docker UI 应该就可以成功了。</p><h2 id="filebrowser"><a href="#filebrowser" class="headerlink" title="filebrowser"></a>filebrowser</h2><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">docker pull <span class="number">80</span>x<span class="number">86</span>/filebrowser:ar<span class="name">m64</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">IMAGE_NAME</span>=80x86/filebrowser</span><br><span class="line"></span><br><span class="line"><span class="attribute">WEB_PORT</span>=8082</span><br><span class="line"><span class="attribute">FB_AUTH_SERVER_ADDR</span>=<span class="string">"127.0.0.1"</span></span><br><span class="line">docker <span class="builtin-name">run</span> -d \</span><br><span class="line">        -e <span class="attribute">PUID</span>=<span class="variable">$UID</span> \</span><br><span class="line">        -e <span class="attribute">PGID</span>=<span class="variable">$GID</span> \</span><br><span class="line">        -e <span class="attribute">WEB_PORT</span>=<span class="variable">$WEB_PORT</span> \</span><br><span class="line">        -e <span class="attribute">FB_AUTH_SERVER_ADDR</span>=<span class="variable">$FB_AUTH_SERVER_ADDR</span> \</span><br><span class="line">        -p <span class="variable">$WEB_PORT</span>:<span class="variable">$WEB_PORT</span> \</span><br><span class="line">        -v /media:/myfiles \</span><br><span class="line">        --mount <span class="attribute">type</span>=tmpfs,destination=/tmp \</span><br><span class="line">        <span class="variable">$&#123;IMAGE_NAME&#125;</span>:arm64</span><br></pre></td></tr></table></figure><p>这个应该大家都可以通用的。</p><p>接下来到浏览器打开<code>IP:8082</code>来访问，看看是否能正常使用。</p><h2 id="qbittorrent"><a href="#qbittorrent" class="headerlink" title="qbittorrent"></a>qbittorrent</h2><p>要先停止自带的 qb ，去 system 里的 Startup 将 qbittorrent 停止，然后将 Yes 改为 No ，这样就不会开机自启了。</p><blockquote><p>勘误，视频中讲将S92qbittorrent改个名字，这种方法并不行。得将其移动到其它位置。</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/etc/init.d/</span></span><br><span class="line">mv S92qbittorrent <span class="string">..</span></span><br></pre></td></tr></table></figure><p>这样S92qbittorrent就会待在 /etc 这个目录下了。</p><p>拉去镜像</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">docker pull <span class="number">80</span>x86/<span class="string">qbittorrent:</span><span class="number">4.2</span><span class="number">.1</span>-arm64</span><br></pre></td></tr></table></figure><p>建立容器</p><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">IMAGE_NAME=80x86/qbittorrent:4.2.1-arm64</span><br><span class="line">#WEB_PORT=$(nvram get app.qb.listen_port)</span><br><span class="line">#这里我原本的默认下载路径是 /media/one/qb 你应该改成自己的</span><br><span class="line">DOWNLOAD_PATH=/media/one/qb</span><br><span class="line">BT_PORT=$(cat /var/lib/qbittorrent/.config/qBittorrent/qBittorrent.conf | grep -i 'Connection\\PortRangeMin' | cut -d'=' -f2)</span><br><span class="line">QBT_AUTH_SERVER_ADDR="127.0.0.1"</span><br><span class="line">if [ "$DOWNLOAD_PATH" = "/downloads" ] || [ "$DOWNLOAD_PATH" = "/downloads/" ]; then</span><br><span class="line">    echo "please set correct DOWNLOAD_PATH"</span><br><span class="line">    exit -1</span><br><span class="line">fi</span><br><span class="line">docker run -d --name qbittorrent \</span><br><span class="line">        -<span class="ruby">e PUID=$(id -u qbittorrent) \</span></span><br><span class="line"><span class="ruby">        -e PGID=$(cat /etc/group <span class="params">| grep -e '^users' |</span> cut -d<span class="string">':'</span> -f3) \</span></span><br><span class="line"><span class="ruby">        -e WEB_PORT=<span class="number">8088</span> \</span></span><br><span class="line"><span class="ruby">        -e BT_PORT=$BT_PORT \</span></span><br><span class="line"><span class="ruby">        -e QBT_AUTH_SERVER_ADDR=$QBT_AUTH_SERVER_ADDR \</span></span><br><span class="line"><span class="ruby">        --restart <span class="keyword">unless</span>-stopped \</span></span><br><span class="line"><span class="ruby">        --network host \</span></span><br><span class="line"><span class="ruby">        -v /var/lib/qbittorrent/.config/<span class="symbol">qBittorrent:</span>/config \</span></span><br><span class="line"><span class="ruby">        -v /var/lib/qbittorrent/.local/share/data/<span class="symbol">qBittorrent:</span>/data \</span></span><br><span class="line"><span class="ruby">        -v <span class="string">"$DOWNLOAD_PATH"</span><span class="symbol">:/downloads</span> \</span></span><br><span class="line"><span class="ruby">        -v <span class="string">"$DOWNLOAD_PATH"</span><span class="symbol">:<span class="string">"$DOWNLOAD_PATH"</span></span> \</span></span><br><span class="line"><span class="ruby">        --mount type=tmpfs,destination=<span class="regexp">/tmp \</span></span></span><br><span class="line"><span class="ruby">        $&#123;IMAGE_NAME&#125;</span></span><br></pre></td></tr></table></figure><p>这里的端口我改为 8088 ，也可以改为和原来一样的 8083</p><p>之后就可以通过 <code>IP:8088</code>来访问 qb 了。设置没错的话，应该可以看到之前的种子信息的。</p><h2 id="微力同步-verysync"><a href="#微力同步-verysync" class="headerlink" title="微力同步 verysync"></a>微力同步 verysync</h2><p>这是一款和 syncthing 类似的同步工具。<code>/media/one/verysync</code>是我自己的路径，其它人使用前需要更改一下。</p><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  -<span class="ruby">-name verysync \</span></span><br><span class="line"><span class="ruby">  --restart=always \</span></span><br><span class="line"><span class="ruby">  -p <span class="number">8886</span><span class="symbol">:</span><span class="number">8886</span> \</span></span><br><span class="line"><span class="ruby">  -v /media/one/<span class="symbol">verysync:</span>/media \</span></span><br><span class="line"><span class="ruby">  lstcml/n1_verysync</span></span><br></pre></td></tr></table></figure><p>这个应用的功能是，可以把一个文件夹，在多台设备之间保持内容同步。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录一些跟小钢炮系统相关的网址、docker 命令等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
      <category term="docker" scheme="https://powersee.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>关于服务器资源取回本地的几种方法</title>
    <link href="https://powersee.github.io/2020/01/three-ways-to-retrieve-the-file/"/>
    <id>https://powersee.github.io/2020/01/three-ways-to-retrieve-the-file/</id>
    <published>2020-01-24T03:14:41.000Z</published>
    <updated>2020-02-23T05:56:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍三种我自己都有用过的方法，都是比较简单的。</p><a id="more"></a><h2 id="一、caddy"><a href="#一、caddy" class="headerlink" title="一、caddy"></a>一、caddy</h2><p> 如同之前的文章所讲到的，安装一个 caddy</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget -<span class="keyword">N</span> --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/ToyoDAdoubi/doubi/master/caddy_install.<span class="keyword">sh</span> &amp;&amp; chmod +<span class="keyword">x</span> caddy_install.<span class="keyword">sh</span> &amp;&amp; bash caddy_install.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p>写入配置</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="comment">":80 &#123;  </span></span><br><span class="line"> root /path/<span class="keyword">to</span>/downloads</span><br><span class="line"> timeouts none  </span><br><span class="line"> gzip  </span><br><span class="line"> <span class="keyword">browse</span>  </span><br><span class="line">&#125;<span class="comment">" &gt; /usr/local/caddy/Caddyfile</span></span><br></pre></td></tr></table></figure><p>启动 caddy</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/caddy start</span></span><br></pre></td></tr></table></figure><p>开放服务器 80 端口</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">ufw allow <span class="number">80</span></span><br></pre></td></tr></table></figure><p>完成后就可以在浏览器里，输入 <code>IP地址</code> 来访问下载好的文件了。如果是 MP4 文件的话，还可以支持在线播放。</p><h2 id="二、h5ai"><a href="#二、h5ai" class="headerlink" title="二、h5ai"></a>二、h5ai</h2><blockquote><p>这是一个 PHP 程序，原本它是要求机器本身有 PHP 才能用的，不过现在使用 docker 来安装的话，也可以非常迅速就安装好。</p></blockquote><p>一行命令即可，最简单</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">docker run -d -p <span class="number">8055</span>:<span class="number">80</span> -v /home/<span class="regexp">tr/download:/h5ai --name h5ai ilemonrain/h</span>5ai:full -d</span><br></pre></td></tr></table></figure><p>装好后在浏览器输入 <code>ip:8085</code> 就可以看到里面的内容</p><h2 id="三、Python-web"><a href="#三、Python-web" class="headerlink" title="三、Python web"></a>三、Python web</h2><p>这个是最简单的，基本所有的服务器都可以，而且不用额外安装其它的程序。只需要在 ssh 时进入到指定的文件夹，然后输入这条命令即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure><p>会默认采用8000端口,此时输入 <strong>IP:8000</strong> 或者 <strong>域名:8000</strong> ，即可访问当前目录下的文件，如果有 <strong>index.html </strong>则会默认加载。</p><p>然后想要停止时，按<code>CTRL + C</code> 取消。<br>不过这种方法有挺多缺点的，比如不支持断点续传，开启时需一直保持 ssh 连接着，显示的文件信息简陋等。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第三种适合于临时下载的，前两种适合长时间的。如果机器本身有装 docker ，那我建议使用第二种。当然第一种也有好处，就是可以绑定指定的域名。</p><p>各取所需吧，适合自己的需求的才是最好的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍三种我自己都有用过的方法，都是比较简单的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="服务器" scheme="https://powersee.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="BT" scheme="https://powersee.github.io/tags/BT/"/>
    
  </entry>
  
  <entry>
    <title>OMV 安装失败如何卸载</title>
    <link href="https://powersee.github.io/2019/12/remove-omv/"/>
    <id>https://powersee.github.io/2019/12/remove-omv/</id>
    <published>2019-12-11T10:25:22.000Z</published>
    <updated>2020-03-23T11:22:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录在 armbian 上安装 omv 失败的过程。</p><a id="more"></a><p>omv 好像不支持在 Debian bust 上面安装，我直接安装后报错了。然后也没法卸载，并且 apt 也没法用了，一用就会提示<code>E: 软件包 openmediavault-omvextrasorg 需要重新安装，但是我无法找到相应的安装文件。</code>苦恼。</p><p>最终解决方法：</p><ol><li><p><code>rm -rf /var/lib/dpkg/info/openmediavault-omvextrasorg*</code></p></li><li><p><code>sudo dpkg --remove --force-remove-reinstreq openmediavault-omvextrasorg</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg: 警告: 由于开启了 --force 选项，以下问题被忽略：</span><br><span class="line">dpkg: 警告: 该软件包现在的状态极为不妥；</span><br><span class="line">建议您在卸载它之前再重新安装一次</span><br><span class="line">(正在读取数据库 ... 系统当前共安装有 112651 个文件和目录。)</span><br><span class="line">正在卸载 openmediavault-omvextrasorg (5.1.9) ...</span><br></pre></td></tr></table></figure></li><li><p>之后再使用 apt 就不会出现问题了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录在 armbian 上安装 omv 失败的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
